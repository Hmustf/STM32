
6_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000440  08000440  00001448  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000440  08000440  00001448  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000440  08000448  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00001440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000448  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000448  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000542  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023a  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00001bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006f  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d8c7  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006ac  00000000  00000000  0000f5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb05  00000000  00000000  0000fc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a0  00000000  00000000  0005f7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0005f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000418 	.word	0x08000418

080001d4 <main>:
#include "uart.h"

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uart2_init();
 80001da:	f000 f88b 	bl	80002f4 <uart2_init>

	while(1)
	{
		uart2_write_string("Hello, world!\n");
 80001de:	4807      	ldr	r0, [pc, #28]	@ (80001fc <main+0x28>)
 80001e0:	f000 f8b6 	bl	8000350 <uart2_write_string>
		for (volatile int i = 0; i < 100000; ++i);
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	e002      	b.n	80001f0 <main+0x1c>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3301      	adds	r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a03      	ldr	r2, [pc, #12]	@ (8000200 <main+0x2c>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	ddf8      	ble.n	80001ea <main+0x16>
		uart2_write_string("Hello, world!\n");
 80001f8:	e7f1      	b.n	80001de <main+0xa>
 80001fa:	bf00      	nop
 80001fc:	08000430 	.word	0x08000430
 8000200:	0001869f 	.word	0x0001869f

08000204 <uart2_gpio_config>:
static void uart2_enable_tx(void);
static void uart2_enable(void);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

static void uart2_gpio_config(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 8000208:	4b0d      	ldr	r3, [pc, #52]	@ (8000240 <uart2_gpio_config+0x3c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a0c      	ldr	r2, [pc, #48]	@ (8000240 <uart2_gpio_config+0x3c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Set PA2 to Alternate Function mode (MODER2 = 0b10) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(4, 2), FIELD_VAL(2U, 4));
 8000214:	4b0b      	ldr	r3, [pc, #44]	@ (8000244 <uart2_gpio_config+0x40>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800021c:	4a09      	ldr	r2, [pc, #36]	@ (8000244 <uart2_gpio_config+0x40>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6013      	str	r3, [r2, #0]

    /* Set PA2 AF to AF7 (USART2_TX) â†’ AFR[0] bits 11:8 = 0111 */
    FIELD_SET(GPIOA->AFR[0], BIT_MASK(8, 4), FIELD_VAL(7U, 8));
 8000224:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <uart2_gpio_config+0x40>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800022c:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <uart2_gpio_config+0x40>)
 800022e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000232:	6213      	str	r3, [r2, #32]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020000 	.word	0x40020000

08000248 <uart2_clock_enable>:

static void uart2_clock_enable(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	/*Enable clock access to uart2 */
    BIT_SET(RCC->APB1ENR, UART2EN_BIT);   
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <uart2_clock_enable+0x1c>)
 800024e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <uart2_clock_enable+0x1c>)
 8000252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000256:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800

08000268 <uart2_baudrate_config>:

static void uart2_baudrate_config(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
    /*Configure baudrate*/
    USARTx->BRR =  compute_uart_bd(PeriphClk, BaudRate);
 8000274:	6879      	ldr	r1, [r7, #4]
 8000276:	68b8      	ldr	r0, [r7, #8]
 8000278:	f000 f808 	bl	800028c <compute_uart_bd>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	609a      	str	r2, [r3, #8]

}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	085a      	lsrs	r2, r3, #1
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	441a      	add	r2, r3
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a4:	b29b      	uxth	r3, r3
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
	...

080002b4 <uart2_enable_tx>:

static void uart2_enable_tx(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	/*Configure the transfer direction*/
	BIT_SET(USART2->CR1, CR1_TE_BIT);   
 80002b8:	4b05      	ldr	r3, [pc, #20]	@ (80002d0 <uart2_enable_tx+0x1c>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a04      	ldr	r2, [pc, #16]	@ (80002d0 <uart2_enable_tx+0x1c>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	60d3      	str	r3, [r2, #12]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40004400 	.word	0x40004400

080002d4 <uart2_enable>:

static void uart2_enable(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    /*Enable uart module*/
    BIT_SET(USART2->CR1, CR1_UE_BIT);
 80002d8:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <uart2_enable+0x1c>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a04      	ldr	r2, [pc, #16]	@ (80002f0 <uart2_enable+0x1c>)
 80002de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40004400 	.word	0x40004400

080002f4 <uart2_init>:

void uart2_init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
    uart2_gpio_config();
 80002f8:	f7ff ff84 	bl	8000204 <uart2_gpio_config>
    uart2_clock_enable();
 80002fc:	f7ff ffa4 	bl	8000248 <uart2_clock_enable>
    uart2_baudrate_config(USART2, APB1_CLK, UART_BAUDRATE);
 8000300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000304:	4904      	ldr	r1, [pc, #16]	@ (8000318 <uart2_init+0x24>)
 8000306:	4805      	ldr	r0, [pc, #20]	@ (800031c <uart2_init+0x28>)
 8000308:	f7ff ffae 	bl	8000268 <uart2_baudrate_config>
    uart2_enable_tx();
 800030c:	f7ff ffd2 	bl	80002b4 <uart2_enable_tx>
    uart2_enable();
 8000310:	f7ff ffe0 	bl	80002d4 <uart2_enable>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	00f42400 	.word	0x00f42400
 800031c:	40004400 	.word	0x40004400

08000320 <uart2_write>:

void uart2_write(const char ch)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
    /*Make sure the transmit data register is empty*/
    while (IS_BIT_CLEAR(USART2->SR, SR_TXE_BIT)) {}
 800032a:	bf00      	nop
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <uart2_write+0x2c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <uart2_write+0xc>

    /*Write to transmit data register*/
    USART2->DR	=  (ch & 0xFF);
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <uart2_write+0x2c>)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	6053      	str	r3, [r2, #4]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400

08000350 <uart2_write_string>:

void uart2_write_string(const char* str)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
    while (*str)
 8000358:	e006      	b.n	8000368 <uart2_write_string+0x18>
    {
        uart2_write(*str++);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	1c5a      	adds	r2, r3, #1
 800035e:	607a      	str	r2, [r7, #4]
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ffdc 	bl	8000320 <uart2_write>
    while (*str)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1f4      	bne.n	800035a <uart2_write_string+0xa>
    }
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff11 	bl	80001d4 <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	2000001c 	.word	0x2000001c

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	@ (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000440 	.word	0x08000440
 800040c:	08000440 	.word	0x08000440
 8000410:	08000440 	.word	0x08000440
 8000414:	08000444 	.word	0x08000444

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
