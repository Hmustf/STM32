
11_Continuous_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080010c4  080010c4  000020c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800110c  0800110c  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800110c  0800110c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001114  08001114  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001114  08001114  00002114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001118  08001118  00002118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  0800111c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  0800116c  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  0800116c  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001470  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a5  00000000  00000000  000044f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00004c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000129  00000000  00000000  00004e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e8d8  00000000  00000000  00004f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002906  00000000  00000000  00013861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054108  00000000  00000000  00016167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006a26f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000978  00000000  00000000  0006a2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0006ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010ac 	.word	0x080010ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	080010ac 	.word	0x080010ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <set_conversion_mode>:
#define SR_EOC_BIT              1

static void set_conversion_mode(conv_mode_t _adc_mode);

static void set_conversion_mode(conv_mode_t _adc_mode)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
    if(_adc_mode == CONV_CONTINUOUS)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d108      	bne.n	80002a2 <set_conversion_mode+0x22>
    {
        BIT_SET(ADC1->CR2, CR2_CONT_BIT);
 8000290:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <set_conversion_mode+0x3c>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a09      	ldr	r2, [pc, #36]	@ (80002bc <set_conversion_mode+0x3c>)
 8000296:	f043 0302 	orr.w	r3, r3, #2
 800029a:	6093      	str	r3, [r2, #8]
        start_conversion();
 800029c:	f000 f84c 	bl	8000338 <start_conversion>
    }
    else if (_adc_mode == CONV_SINGLE)
    {
        BIT_CLEAR(ADC1->CR2, CR2_CONT_BIT); 
    }
}
 80002a0:	e008      	b.n	80002b4 <set_conversion_mode+0x34>
    else if (_adc_mode == CONV_SINGLE)
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <set_conversion_mode+0x34>
        BIT_CLEAR(ADC1->CR2, CR2_CONT_BIT); 
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <set_conversion_mode+0x3c>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a03      	ldr	r2, [pc, #12]	@ (80002bc <set_conversion_mode+0x3c>)
 80002ae:	f023 0302 	bic.w	r3, r3, #2
 80002b2:	6093      	str	r3, [r2, #8]
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40012000 	.word	0x40012000

080002c0 <adc_init>:

void adc_init(conv_mode_t _adc_mode)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 80002ca:	4b18      	ldr	r3, [pc, #96]	@ (800032c <adc_init+0x6c>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a17      	ldr	r2, [pc, #92]	@ (800032c <adc_init+0x6c>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Set PA1 to Analog mode (MODER2 = 0b11) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER1_BIT, MODER_FIELD_WIDTH), FIELD_VAL(ANALOG, MODER1_BIT));
 80002d6:	4b16      	ldr	r3, [pc, #88]	@ (8000330 <adc_init+0x70>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a15      	ldr	r2, [pc, #84]	@ (8000330 <adc_init+0x70>)
 80002dc:	f043 030c 	orr.w	r3, r3, #12
 80002e0:	6013      	str	r3, [r2, #0]
	/*Enable clock access to adc1 */
    BIT_SET(RCC->APB2ENR, ADC1EN_BIT);
 80002e2:	4b12      	ldr	r3, [pc, #72]	@ (800032c <adc_init+0x6c>)
 80002e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e6:	4a11      	ldr	r2, [pc, #68]	@ (800032c <adc_init+0x6c>)
 80002e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ec:	6453      	str	r3, [r2, #68]	@ 0x44
    /*Clear SQR3 */
    ADC1->SQR3 = 0;
 80002ee:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <adc_init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	635a      	str	r2, [r3, #52]	@ 0x34
    /*Set SQ1 = channel 1 (bits [4:0]) */
    FIELD_SET(ADC1->SQR3, BIT_MASK(SQR3_SQ1_BIT, ADC_SQ_FIELD_WIDTH), FIELD_VAL(ADC1_CH1, SQR3_SQ1_BIT));  // SQ1 = 1
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <adc_init+0x74>)
 80002f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002f8:	f023 031f 	bic.w	r3, r3, #31
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <adc_init+0x74>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6353      	str	r3, [r2, #52]	@ 0x34
    // Clear L[3:0] in SQR1 (1 conversion => L = 0)
    FIELD_SET(ADC1->SQR1, BIT_MASK(20, 4), FIELD_VAL(0, 20));
 8000304:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <adc_init+0x74>)
 8000306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000308:	4a0a      	ldr	r2, [pc, #40]	@ (8000334 <adc_init+0x74>)
 800030a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800030e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /*Enable ADC Module */
    BIT_SET(ADC1->CR2, CR2_ADON_BIT);
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <adc_init+0x74>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a07      	ldr	r2, [pc, #28]	@ (8000334 <adc_init+0x74>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6093      	str	r3, [r2, #8]

    set_conversion_mode(_adc_mode);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ffae 	bl	8000280 <set_conversion_mode>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40023800 	.word	0x40023800
 8000330:	40020000 	.word	0x40020000
 8000334:	40012000 	.word	0x40012000

08000338 <start_conversion>:

void start_conversion(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    BIT_SET(ADC1->CR2, CR2_SWSTART_BIT);
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <start_conversion+0x1c>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <start_conversion+0x1c>)
 8000342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000346:	6093      	str	r3, [r2, #8]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40012000 	.word	0x40012000

08000358 <drv_init>:


#include "drv.h"

void drv_init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    gpio_init(); 
 800035c:	f000 f80a 	bl	8000374 <gpio_init>
    uart2_init();
 8000360:	f000 f968 	bl	8000634 <uart2_init>
    adc_init(CONV_CONTINUOUS);
 8000364:	2001      	movs	r0, #1
 8000366:	f7ff ffab 	bl	80002c0 <adc_init>
    timer_init();
 800036a:	f000 f8ad 	bl	80004c8 <timer_init>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <gpio_init>:
#define MODER5_BIT              (PIN5*MODER_FIELD_WIDTH)
#define MODER13_BIT             (PIN13*MODER_FIELD_WIDTH)


void gpio_init(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <gpio_init+0x44>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037c:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <gpio_init+0x44>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6313      	str	r3, [r2, #48]	@ 0x30
    BIT_SET(RCC->AHB1ENR, GPIOCEN_BIT);
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <gpio_init+0x44>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a0b      	ldr	r2, [pc, #44]	@ (80003b8 <gpio_init+0x44>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Set PA5 to output mode (MODER5 = 0b01) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER5_BIT, MODER_FIELD_WIDTH), FIELD_VAL(OUTPUT, MODER5_BIT));
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <gpio_init+0x48>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000398:	4a08      	ldr	r2, [pc, #32]	@ (80003bc <gpio_init+0x48>)
 800039a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800039e:	6013      	str	r3, [r2, #0]
    /* Set PC13 to input mode (MODER5 = 0b00) */
    FIELD_SET(GPIOC->MODER, BIT_MASK(MODER13_BIT, MODER_FIELD_WIDTH), FIELD_VAL(INPUT, MODER13_BIT));
 80003a0:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <gpio_init+0x4c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a06      	ldr	r2, [pc, #24]	@ (80003c0 <gpio_init+0x4c>)
 80003a6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40020000 	.word	0x40020000
 80003c0:	40020800 	.word	0x40020800

080003c4 <onboard_led_toggle>:
    }

}

void onboard_led_toggle(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
    GPIO_PIN_TOGGLE(GPIOA, PIN5);
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <onboard_led_toggle+0x1c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <onboard_led_toggle+0x1c>)
 80003ce:	f083 0320 	eor.w	r3, r3, #32
 80003d2:	6153      	str	r3, [r2, #20]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40020000 	.word	0x40020000

080003e4 <main>:
 ******************************************************************************/

#include "system.h"

int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    sys_init();
 80003e8:	f000 f842 	bl	8000470 <sys_init>

	while(1)
	{

        tim2_1sec_wait();
 80003ec:	f000 f872 	bl	80004d4 <tim2_1sec_wait>
        onboard_led_toggle();
 80003f0:	f7ff ffe8 	bl	80003c4 <onboard_led_toggle>
        uart2_printf("One second passed!\r\n");
 80003f4:	4802      	ldr	r0, [pc, #8]	@ (8000400 <main+0x1c>)
 80003f6:	f000 f962 	bl	80006be <uart2_printf>
        tim2_1sec_wait();
 80003fa:	bf00      	nop
 80003fc:	e7f6      	b.n	80003ec <main+0x8>
 80003fe:	bf00      	nop
 8000400:	080010c4 	.word	0x080010c4

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	@ (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	@ (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f000 f9c4 	bl	80007c0 <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20018000 	.word	0x20018000
 8000464:	00000400 	.word	0x00000400
 8000468:	2000006c 	.word	0x2000006c
 800046c:	200001b8 	.word	0x200001b8

08000470 <sys_init>:
#include "system.h"
#include "config.h"


void sys_init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
    #ifdef STM32_NUC
    drv_init();
 8000474:	f7ff ff70 	bl	8000358 <drv_init>
    #endif
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <tim2_1hz_init>:
 * @note   Configures TIM2 to generate a 1Hz timebase
 * @param  None
 * @retval None
 */
void tim2_1hz_init(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	/* Enable clock access to tim2 */
	BIT_SET(RCC->APB1ENR, TIM2EN_BIT);
 8000480:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <tim2_1hz_init+0x48>)
 8000482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <tim2_1hz_init+0x48>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Set prescaler value */
	TIM2->PSC = TIM_PSC - 1;  //  16 000 000 / 1 600 = 10 000
 800048c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000490:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000494:	629a      	str	r2, [r3, #40]	@ 0x28
	
	/* Set auto-reload value */
	TIM2->ARR = TIM_ARR - 1;  // 10 000 / 10 000 = 1
 8000496:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800049e:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	/* Clear counter */
	TIM2->CNT = 0;
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a4:	2200      	movs	r2, #0
 80004a6:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Enable timer */
	BIT_SET(TIM2->CR1, CR1_CEN_BIT);
 80004a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800

080004c8 <timer_init>:
 * @note   Currently only initializes TIM2 with 1Hz frequency
 * @param  None
 * @retval None
 */
void timer_init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
    tim2_1hz_init();
 80004cc:	f7ff ffd6 	bl	800047c <tim2_1hz_init>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <tim2_1sec_wait>:
 *         and then clears the update flag
 * @param  None
 * @retval None
 */
void tim2_1sec_wait(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	/* Wait until update event flag is set */
	while(IS_BIT_CLEAR(TIM2->SR, SR_UIF_BIT)){}
 80004d8:	bf00      	nop
 80004da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004de:	691b      	ldr	r3, [r3, #16]
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f8      	beq.n	80004da <tim2_1sec_wait+0x6>
	
	/* Clear update event flag */
	BIT_CLEAR(TIM2->SR, SR_UIF_BIT);
 80004e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	6113      	str	r3, [r2, #16]
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <uart2_gpio_config>:
 * @note   Sets PA2 and PA3 to alternate function mode with AF7 (USART2)
 * @param  None
 * @retval None
 */
static void uart2_gpio_config(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <uart2_gpio_config+0x5c>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <uart2_gpio_config+0x5c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Set PA2 to Alternate Function mode (MODER2 = 0b10) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER2_BIT, MODER_FIELD_WIDTH), FIELD_VAL(ALTERNATE, MODER2_BIT));
 8000514:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <uart2_gpio_config+0x60>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800051c:	4a11      	ldr	r2, [pc, #68]	@ (8000564 <uart2_gpio_config+0x60>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6013      	str	r3, [r2, #0]
    /* Set PA2 AF to AF7 (USART2_TX) → AFR[0] bits 11:8 = 0111 */
    FIELD_SET(GPIOA->AFR[0], BIT_MASK(AFRL2_BIT, AFR_FIELD_WIDTH), FIELD_VAL(AF7, AFRL2_BIT));
 8000524:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <uart2_gpio_config+0x60>)
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <uart2_gpio_config+0x60>)
 800052e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000532:	6213      	str	r3, [r2, #32]
    /* Set PA3 to Alternate Function mode (MODER2 = 0b10) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER3_BIT, MODER_FIELD_WIDTH), FIELD_VAL(ALTERNATE, MODER3_BIT));
 8000534:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <uart2_gpio_config+0x60>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800053c:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <uart2_gpio_config+0x60>)
 800053e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000542:	6013      	str	r3, [r2, #0]
    /* Set PA3 AF to AF7 (USART2_RX) → AFR[0] bits 15:12 = 0111 */
    FIELD_SET(GPIOA->AFR[0], BIT_MASK(AFRL3_BIT, AFR_FIELD_WIDTH), FIELD_VAL(AF7, AFRL3_BIT));
 8000544:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <uart2_gpio_config+0x60>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800054c:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <uart2_gpio_config+0x60>)
 800054e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000552:	6213      	str	r3, [r2, #32]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800
 8000564:	40020000 	.word	0x40020000

08000568 <uart2_clock_enable>:
 * @brief  Enable clock for UART2 peripheral
 * @param  None
 * @retval None
 */
static void uart2_clock_enable(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	/*Enable clock access to uart2 */
    BIT_SET(RCC->APB1ENR, UART2EN_BIT);
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <uart2_clock_enable+0x1c>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <uart2_clock_enable+0x1c>)
 8000572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000576:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <compute_uart_bd>:
 * @param  PeriphClk: Peripheral clock frequency in Hz
 * @param  BaudRate: Desired baud rate in bits per second
 * @retval uint16_t: Value to be written to BRR register
 */
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	085a      	lsrs	r2, r3, #1
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	441a      	add	r2, r3
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	b29b      	uxth	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <uart2_baudrate_config>:
 * @param  PeriphClk: Peripheral clock frequency in Hz
 * @param  BaudRate: Desired baud rate in bits per second
 * @retval None
 */
static void uart2_baudrate_config(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b084      	sub	sp, #16
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
    /*Configure baudrate*/
    USARTx->BRR =  compute_uart_bd(PeriphClk, BaudRate);
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	68b8      	ldr	r0, [r7, #8]
 80005be:	f7ff ffe3 	bl	8000588 <compute_uart_bd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	609a      	str	r2, [r3, #8]

}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <uart2_enable_tx>:
 * @brief  Enable UART2 transmitter
 * @param  None
 * @retval None
 */
static void uart2_enable_tx(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	/*Configure the transfer direction*/
	BIT_SET(USART2->CR1, CR1_TE_BIT);
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <uart2_enable_tx+0x1c>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <uart2_enable_tx+0x1c>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40004400 	.word	0x40004400

080005f4 <uart2_enable_rx>:
 * @brief  Enable UART2 receiver
 * @param  None
 * @retval None
 */
static void uart2_enable_rx(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	/*Configure the transfer direction*/
	BIT_SET(USART2->CR1, CR1_RE_BIT);
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <uart2_enable_rx+0x1c>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <uart2_enable_rx+0x1c>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40004400 	.word	0x40004400

08000614 <uart2_enable>:
 * @brief  Enable UART2 peripheral
 * @param  None
 * @retval None
 */
static void uart2_enable(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
    /*Enable uart module*/
    BIT_SET(USART2->CR1, CR1_UE_BIT);
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <uart2_enable+0x1c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <uart2_enable+0x1c>)
 800061e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40004400 	.word	0x40004400

08000634 <uart2_init>:
 * @note   Configures UART2 with 115200 baud rate, 8-bit data, no parity, 1 stop bit
 * @param  None
 * @retval None
 */
void uart2_init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    uart2_gpio_config();
 8000638:	f7ff ff64 	bl	8000504 <uart2_gpio_config>
    uart2_clock_enable();
 800063c:	f7ff ff94 	bl	8000568 <uart2_clock_enable>
    uart2_baudrate_config(USART2, APB1_CLK, UART_BAUDRATE);
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	4905      	ldr	r1, [pc, #20]	@ (800065c <uart2_init+0x28>)
 8000646:	4806      	ldr	r0, [pc, #24]	@ (8000660 <uart2_init+0x2c>)
 8000648:	f7ff ffb1 	bl	80005ae <uart2_baudrate_config>
    uart2_enable_tx();
 800064c:	f7ff ffc2 	bl	80005d4 <uart2_enable_tx>
    uart2_enable_rx();
 8000650:	f7ff ffd0 	bl	80005f4 <uart2_enable_rx>
    uart2_enable();
 8000654:	f7ff ffde 	bl	8000614 <uart2_enable>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	00f42400 	.word	0x00f42400
 8000660:	40004400 	.word	0x40004400

08000664 <uart2_write>:
 * @note   This function blocks until the transmit buffer is empty
 * @param  ch: Character to be transmitted
 * @retval None
 */
void uart2_write(const char ch)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
    /*Make sure the transmit data register is empty*/
    while (IS_BIT_CLEAR(USART2->SR, SR_TXE_BIT)) {}
 800066e:	bf00      	nop
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <uart2_write+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f9      	beq.n	8000670 <uart2_write+0xc>

    /*Write to transmit data register*/
    USART2->DR	=  (ch & 0xFF);
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <uart2_write+0x2c>)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	6053      	str	r3, [r2, #4]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40004400 	.word	0x40004400

08000694 <uart2_write_string>:
 * @brief  Write a null-terminated string to UART2
 * @param  str: Pointer to the string to be transmitted
 * @retval None
 */
void uart2_write_string(const char* str)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    while (*str)
 800069c:	e006      	b.n	80006ac <uart2_write_string+0x18>
    {
        uart2_write(*str++);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffdc 	bl	8000664 <uart2_write>
    while (*str)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f4      	bne.n	800069e <uart2_write_string+0xa>
    }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <uart2_printf>:
 * @param  format: Format string (printf style)
 * @param  ...: Variable arguments
 * @retval None
 */
void uart2_printf(const char *format, ...)
{
 80006be:	b40f      	push	{r0, r1, r2, r3}
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a2      	sub	sp, #136	@ 0x88
 80006c4:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80006c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80006ca:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80006cc:	f107 0008 	add.w	r0, r7, #8
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	f000 f864 	bl	80007a4 <vsniprintf>
    va_end(args);
    uart2_write_string(buffer);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffd7 	bl	8000694 <uart2_write_string>
 80006e6:	bf00      	nop
 80006e8:	3788      	adds	r7, #136	@ 0x88
 80006ea:	46bd      	mov	sp, r7
 80006ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f0:	b004      	add	sp, #16
 80006f2:	4770      	bx	lr

080006f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	@ (8000734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	@ (8000740 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000722:	f000 f853 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fe5d 	bl	80003e4 <main>

0800072a <LoopForever>:

LoopForever:
  b LoopForever
 800072a:	e7fe      	b.n	800072a <LoopForever>
  ldr   r0, =_estack
 800072c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000738:	0800111c 	.word	0x0800111c
  ldr r2, =_sbss
 800073c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000740:	200001b8 	.word	0x200001b8

08000744 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>

08000746 <_vsniprintf_r>:
 8000746:	b530      	push	{r4, r5, lr}
 8000748:	4614      	mov	r4, r2
 800074a:	2c00      	cmp	r4, #0
 800074c:	b09b      	sub	sp, #108	@ 0x6c
 800074e:	4605      	mov	r5, r0
 8000750:	461a      	mov	r2, r3
 8000752:	da05      	bge.n	8000760 <_vsniprintf_r+0x1a>
 8000754:	238b      	movs	r3, #139	@ 0x8b
 8000756:	6003      	str	r3, [r0, #0]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800075c:	b01b      	add	sp, #108	@ 0x6c
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000764:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	9319      	str	r3, [sp, #100]	@ 0x64
 800076e:	bf14      	ite	ne
 8000770:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8000774:	4623      	moveq	r3, r4
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	9305      	str	r3, [sp, #20]
 800077a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077e:	9100      	str	r1, [sp, #0]
 8000780:	9104      	str	r1, [sp, #16]
 8000782:	f8ad 300e 	strh.w	r3, [sp, #14]
 8000786:	4669      	mov	r1, sp
 8000788:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800078a:	f000 f8a1 	bl	80008d0 <_svfiprintf_r>
 800078e:	1c43      	adds	r3, r0, #1
 8000790:	bfbc      	itt	lt
 8000792:	238b      	movlt	r3, #139	@ 0x8b
 8000794:	602b      	strlt	r3, [r5, #0]
 8000796:	2c00      	cmp	r4, #0
 8000798:	d0e0      	beq.n	800075c <_vsniprintf_r+0x16>
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e7dc      	b.n	800075c <_vsniprintf_r+0x16>
	...

080007a4 <vsniprintf>:
 80007a4:	b507      	push	{r0, r1, r2, lr}
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4613      	mov	r3, r2
 80007aa:	460a      	mov	r2, r1
 80007ac:	4601      	mov	r1, r0
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <vsniprintf+0x18>)
 80007b0:	6800      	ldr	r0, [r0, #0]
 80007b2:	f7ff ffc8 	bl	8000746 <_vsniprintf_r>
 80007b6:	b003      	add	sp, #12
 80007b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80007bc:	20000000 	.word	0x20000000

080007c0 <__errno>:
 80007c0:	4b01      	ldr	r3, [pc, #4]	@ (80007c8 <__errno+0x8>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000804 <__libc_init_array+0x38>)
 80007d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000808 <__libc_init_array+0x3c>)
 80007d2:	1b64      	subs	r4, r4, r5
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	2600      	movs	r6, #0
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	4d0b      	ldr	r5, [pc, #44]	@ (800080c <__libc_init_array+0x40>)
 80007de:	4c0c      	ldr	r4, [pc, #48]	@ (8000810 <__libc_init_array+0x44>)
 80007e0:	f000 fc64 	bl	80010ac <_init>
 80007e4:	1b64      	subs	r4, r4, r5
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	2600      	movs	r6, #0
 80007ea:	42a6      	cmp	r6, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f4:	4798      	blx	r3
 80007f6:	3601      	adds	r6, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fe:	4798      	blx	r3
 8000800:	3601      	adds	r6, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	08001114 	.word	0x08001114
 8000808:	08001114 	.word	0x08001114
 800080c:	08001114 	.word	0x08001114
 8000810:	08001118 	.word	0x08001118

08000814 <__retarget_lock_acquire_recursive>:
 8000814:	4770      	bx	lr

08000816 <__retarget_lock_release_recursive>:
 8000816:	4770      	bx	lr

08000818 <__ssputs_r>:
 8000818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800081c:	688e      	ldr	r6, [r1, #8]
 800081e:	461f      	mov	r7, r3
 8000820:	42be      	cmp	r6, r7
 8000822:	680b      	ldr	r3, [r1, #0]
 8000824:	4682      	mov	sl, r0
 8000826:	460c      	mov	r4, r1
 8000828:	4690      	mov	r8, r2
 800082a:	d82d      	bhi.n	8000888 <__ssputs_r+0x70>
 800082c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000830:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000834:	d026      	beq.n	8000884 <__ssputs_r+0x6c>
 8000836:	6965      	ldr	r5, [r4, #20]
 8000838:	6909      	ldr	r1, [r1, #16]
 800083a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800083e:	eba3 0901 	sub.w	r9, r3, r1
 8000842:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000846:	1c7b      	adds	r3, r7, #1
 8000848:	444b      	add	r3, r9
 800084a:	106d      	asrs	r5, r5, #1
 800084c:	429d      	cmp	r5, r3
 800084e:	bf38      	it	cc
 8000850:	461d      	movcc	r5, r3
 8000852:	0553      	lsls	r3, r2, #21
 8000854:	d527      	bpl.n	80008a6 <__ssputs_r+0x8e>
 8000856:	4629      	mov	r1, r5
 8000858:	f000 f958 	bl	8000b0c <_malloc_r>
 800085c:	4606      	mov	r6, r0
 800085e:	b360      	cbz	r0, 80008ba <__ssputs_r+0xa2>
 8000860:	6921      	ldr	r1, [r4, #16]
 8000862:	464a      	mov	r2, r9
 8000864:	f000 fbc2 	bl	8000fec <memcpy>
 8000868:	89a3      	ldrh	r3, [r4, #12]
 800086a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800086e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000872:	81a3      	strh	r3, [r4, #12]
 8000874:	6126      	str	r6, [r4, #16]
 8000876:	6165      	str	r5, [r4, #20]
 8000878:	444e      	add	r6, r9
 800087a:	eba5 0509 	sub.w	r5, r5, r9
 800087e:	6026      	str	r6, [r4, #0]
 8000880:	60a5      	str	r5, [r4, #8]
 8000882:	463e      	mov	r6, r7
 8000884:	42be      	cmp	r6, r7
 8000886:	d900      	bls.n	800088a <__ssputs_r+0x72>
 8000888:	463e      	mov	r6, r7
 800088a:	6820      	ldr	r0, [r4, #0]
 800088c:	4632      	mov	r2, r6
 800088e:	4641      	mov	r1, r8
 8000890:	f000 fb82 	bl	8000f98 <memmove>
 8000894:	68a3      	ldr	r3, [r4, #8]
 8000896:	1b9b      	subs	r3, r3, r6
 8000898:	60a3      	str	r3, [r4, #8]
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	4433      	add	r3, r6
 800089e:	6023      	str	r3, [r4, #0]
 80008a0:	2000      	movs	r0, #0
 80008a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a6:	462a      	mov	r2, r5
 80008a8:	f000 fb48 	bl	8000f3c <_realloc_r>
 80008ac:	4606      	mov	r6, r0
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d1e0      	bne.n	8000874 <__ssputs_r+0x5c>
 80008b2:	6921      	ldr	r1, [r4, #16]
 80008b4:	4650      	mov	r0, sl
 80008b6:	f000 fba7 	bl	8001008 <_free_r>
 80008ba:	230c      	movs	r3, #12
 80008bc:	f8ca 3000 	str.w	r3, [sl]
 80008c0:	89a3      	ldrh	r3, [r4, #12]
 80008c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c6:	81a3      	strh	r3, [r4, #12]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008cc:	e7e9      	b.n	80008a2 <__ssputs_r+0x8a>
	...

080008d0 <_svfiprintf_r>:
 80008d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d4:	4698      	mov	r8, r3
 80008d6:	898b      	ldrh	r3, [r1, #12]
 80008d8:	061b      	lsls	r3, r3, #24
 80008da:	b09d      	sub	sp, #116	@ 0x74
 80008dc:	4607      	mov	r7, r0
 80008de:	460d      	mov	r5, r1
 80008e0:	4614      	mov	r4, r2
 80008e2:	d510      	bpl.n	8000906 <_svfiprintf_r+0x36>
 80008e4:	690b      	ldr	r3, [r1, #16]
 80008e6:	b973      	cbnz	r3, 8000906 <_svfiprintf_r+0x36>
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	f000 f90f 	bl	8000b0c <_malloc_r>
 80008ee:	6028      	str	r0, [r5, #0]
 80008f0:	6128      	str	r0, [r5, #16]
 80008f2:	b930      	cbnz	r0, 8000902 <_svfiprintf_r+0x32>
 80008f4:	230c      	movs	r3, #12
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008fc:	b01d      	add	sp, #116	@ 0x74
 80008fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	616b      	str	r3, [r5, #20]
 8000906:	2300      	movs	r3, #0
 8000908:	9309      	str	r3, [sp, #36]	@ 0x24
 800090a:	2320      	movs	r3, #32
 800090c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000910:	f8cd 800c 	str.w	r8, [sp, #12]
 8000914:	2330      	movs	r3, #48	@ 0x30
 8000916:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000ab4 <_svfiprintf_r+0x1e4>
 800091a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800091e:	f04f 0901 	mov.w	r9, #1
 8000922:	4623      	mov	r3, r4
 8000924:	469a      	mov	sl, r3
 8000926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800092a:	b10a      	cbz	r2, 8000930 <_svfiprintf_r+0x60>
 800092c:	2a25      	cmp	r2, #37	@ 0x25
 800092e:	d1f9      	bne.n	8000924 <_svfiprintf_r+0x54>
 8000930:	ebba 0b04 	subs.w	fp, sl, r4
 8000934:	d00b      	beq.n	800094e <_svfiprintf_r+0x7e>
 8000936:	465b      	mov	r3, fp
 8000938:	4622      	mov	r2, r4
 800093a:	4629      	mov	r1, r5
 800093c:	4638      	mov	r0, r7
 800093e:	f7ff ff6b 	bl	8000818 <__ssputs_r>
 8000942:	3001      	adds	r0, #1
 8000944:	f000 80a7 	beq.w	8000a96 <_svfiprintf_r+0x1c6>
 8000948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800094a:	445a      	add	r2, fp
 800094c:	9209      	str	r2, [sp, #36]	@ 0x24
 800094e:	f89a 3000 	ldrb.w	r3, [sl]
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 809f 	beq.w	8000a96 <_svfiprintf_r+0x1c6>
 8000958:	2300      	movs	r3, #0
 800095a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800095e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000962:	f10a 0a01 	add.w	sl, sl, #1
 8000966:	9304      	str	r3, [sp, #16]
 8000968:	9307      	str	r3, [sp, #28]
 800096a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800096e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000970:	4654      	mov	r4, sl
 8000972:	2205      	movs	r2, #5
 8000974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000978:	484e      	ldr	r0, [pc, #312]	@ (8000ab4 <_svfiprintf_r+0x1e4>)
 800097a:	f7ff fc31 	bl	80001e0 <memchr>
 800097e:	9a04      	ldr	r2, [sp, #16]
 8000980:	b9d8      	cbnz	r0, 80009ba <_svfiprintf_r+0xea>
 8000982:	06d0      	lsls	r0, r2, #27
 8000984:	bf44      	itt	mi
 8000986:	2320      	movmi	r3, #32
 8000988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800098c:	0711      	lsls	r1, r2, #28
 800098e:	bf44      	itt	mi
 8000990:	232b      	movmi	r3, #43	@ 0x2b
 8000992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000996:	f89a 3000 	ldrb.w	r3, [sl]
 800099a:	2b2a      	cmp	r3, #42	@ 0x2a
 800099c:	d015      	beq.n	80009ca <_svfiprintf_r+0xfa>
 800099e:	9a07      	ldr	r2, [sp, #28]
 80009a0:	4654      	mov	r4, sl
 80009a2:	2000      	movs	r0, #0
 80009a4:	f04f 0c0a 	mov.w	ip, #10
 80009a8:	4621      	mov	r1, r4
 80009aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009ae:	3b30      	subs	r3, #48	@ 0x30
 80009b0:	2b09      	cmp	r3, #9
 80009b2:	d94b      	bls.n	8000a4c <_svfiprintf_r+0x17c>
 80009b4:	b1b0      	cbz	r0, 80009e4 <_svfiprintf_r+0x114>
 80009b6:	9207      	str	r2, [sp, #28]
 80009b8:	e014      	b.n	80009e4 <_svfiprintf_r+0x114>
 80009ba:	eba0 0308 	sub.w	r3, r0, r8
 80009be:	fa09 f303 	lsl.w	r3, r9, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	9304      	str	r3, [sp, #16]
 80009c6:	46a2      	mov	sl, r4
 80009c8:	e7d2      	b.n	8000970 <_svfiprintf_r+0xa0>
 80009ca:	9b03      	ldr	r3, [sp, #12]
 80009cc:	1d19      	adds	r1, r3, #4
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	9103      	str	r1, [sp, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bfbb      	ittet	lt
 80009d6:	425b      	neglt	r3, r3
 80009d8:	f042 0202 	orrlt.w	r2, r2, #2
 80009dc:	9307      	strge	r3, [sp, #28]
 80009de:	9307      	strlt	r3, [sp, #28]
 80009e0:	bfb8      	it	lt
 80009e2:	9204      	strlt	r2, [sp, #16]
 80009e4:	7823      	ldrb	r3, [r4, #0]
 80009e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80009e8:	d10a      	bne.n	8000a00 <_svfiprintf_r+0x130>
 80009ea:	7863      	ldrb	r3, [r4, #1]
 80009ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80009ee:	d132      	bne.n	8000a56 <_svfiprintf_r+0x186>
 80009f0:	9b03      	ldr	r3, [sp, #12]
 80009f2:	1d1a      	adds	r2, r3, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	9203      	str	r2, [sp, #12]
 80009f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009fc:	3402      	adds	r4, #2
 80009fe:	9305      	str	r3, [sp, #20]
 8000a00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000ac4 <_svfiprintf_r+0x1f4>
 8000a04:	7821      	ldrb	r1, [r4, #0]
 8000a06:	2203      	movs	r2, #3
 8000a08:	4650      	mov	r0, sl
 8000a0a:	f7ff fbe9 	bl	80001e0 <memchr>
 8000a0e:	b138      	cbz	r0, 8000a20 <_svfiprintf_r+0x150>
 8000a10:	9b04      	ldr	r3, [sp, #16]
 8000a12:	eba0 000a 	sub.w	r0, r0, sl
 8000a16:	2240      	movs	r2, #64	@ 0x40
 8000a18:	4082      	lsls	r2, r0
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	3401      	adds	r4, #1
 8000a1e:	9304      	str	r3, [sp, #16]
 8000a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a24:	4824      	ldr	r0, [pc, #144]	@ (8000ab8 <_svfiprintf_r+0x1e8>)
 8000a26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	f7ff fbd8 	bl	80001e0 <memchr>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d036      	beq.n	8000aa2 <_svfiprintf_r+0x1d2>
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <_svfiprintf_r+0x1ec>)
 8000a36:	bb1b      	cbnz	r3, 8000a80 <_svfiprintf_r+0x1b0>
 8000a38:	9b03      	ldr	r3, [sp, #12]
 8000a3a:	3307      	adds	r3, #7
 8000a3c:	f023 0307 	bic.w	r3, r3, #7
 8000a40:	3308      	adds	r3, #8
 8000a42:	9303      	str	r3, [sp, #12]
 8000a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a46:	4433      	add	r3, r6
 8000a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a4a:	e76a      	b.n	8000922 <_svfiprintf_r+0x52>
 8000a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a50:	460c      	mov	r4, r1
 8000a52:	2001      	movs	r0, #1
 8000a54:	e7a8      	b.n	80009a8 <_svfiprintf_r+0xd8>
 8000a56:	2300      	movs	r3, #0
 8000a58:	3401      	adds	r4, #1
 8000a5a:	9305      	str	r3, [sp, #20]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 0c0a 	mov.w	ip, #10
 8000a62:	4620      	mov	r0, r4
 8000a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a68:	3a30      	subs	r2, #48	@ 0x30
 8000a6a:	2a09      	cmp	r2, #9
 8000a6c:	d903      	bls.n	8000a76 <_svfiprintf_r+0x1a6>
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0c6      	beq.n	8000a00 <_svfiprintf_r+0x130>
 8000a72:	9105      	str	r1, [sp, #20]
 8000a74:	e7c4      	b.n	8000a00 <_svfiprintf_r+0x130>
 8000a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e7f0      	b.n	8000a62 <_svfiprintf_r+0x192>
 8000a80:	ab03      	add	r3, sp, #12
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	462a      	mov	r2, r5
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <_svfiprintf_r+0x1f0>)
 8000a88:	a904      	add	r1, sp, #16
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	f3af 8000 	nop.w
 8000a90:	1c42      	adds	r2, r0, #1
 8000a92:	4606      	mov	r6, r0
 8000a94:	d1d6      	bne.n	8000a44 <_svfiprintf_r+0x174>
 8000a96:	89ab      	ldrh	r3, [r5, #12]
 8000a98:	065b      	lsls	r3, r3, #25
 8000a9a:	f53f af2d 	bmi.w	80008f8 <_svfiprintf_r+0x28>
 8000a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000aa0:	e72c      	b.n	80008fc <_svfiprintf_r+0x2c>
 8000aa2:	ab03      	add	r3, sp, #12
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	462a      	mov	r2, r5
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <_svfiprintf_r+0x1f0>)
 8000aaa:	a904      	add	r1, sp, #16
 8000aac:	4638      	mov	r0, r7
 8000aae:	f000 f91b 	bl	8000ce8 <_printf_i>
 8000ab2:	e7ed      	b.n	8000a90 <_svfiprintf_r+0x1c0>
 8000ab4:	080010d9 	.word	0x080010d9
 8000ab8:	080010e3 	.word	0x080010e3
 8000abc:	00000000 	.word	0x00000000
 8000ac0:	08000819 	.word	0x08000819
 8000ac4:	080010df 	.word	0x080010df

08000ac8 <sbrk_aligned>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	4e0f      	ldr	r6, [pc, #60]	@ (8000b08 <sbrk_aligned+0x40>)
 8000acc:	460c      	mov	r4, r1
 8000ace:	6831      	ldr	r1, [r6, #0]
 8000ad0:	4605      	mov	r5, r0
 8000ad2:	b911      	cbnz	r1, 8000ada <sbrk_aligned+0x12>
 8000ad4:	f000 fa7a 	bl	8000fcc <_sbrk_r>
 8000ad8:	6030      	str	r0, [r6, #0]
 8000ada:	4621      	mov	r1, r4
 8000adc:	4628      	mov	r0, r5
 8000ade:	f000 fa75 	bl	8000fcc <_sbrk_r>
 8000ae2:	1c43      	adds	r3, r0, #1
 8000ae4:	d103      	bne.n	8000aee <sbrk_aligned+0x26>
 8000ae6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000aea:	4620      	mov	r0, r4
 8000aec:	bd70      	pop	{r4, r5, r6, pc}
 8000aee:	1cc4      	adds	r4, r0, #3
 8000af0:	f024 0403 	bic.w	r4, r4, #3
 8000af4:	42a0      	cmp	r0, r4
 8000af6:	d0f8      	beq.n	8000aea <sbrk_aligned+0x22>
 8000af8:	1a21      	subs	r1, r4, r0
 8000afa:	4628      	mov	r0, r5
 8000afc:	f000 fa66 	bl	8000fcc <_sbrk_r>
 8000b00:	3001      	adds	r0, #1
 8000b02:	d1f2      	bne.n	8000aea <sbrk_aligned+0x22>
 8000b04:	e7ef      	b.n	8000ae6 <sbrk_aligned+0x1e>
 8000b06:	bf00      	nop
 8000b08:	200001ac 	.word	0x200001ac

08000b0c <_malloc_r>:
 8000b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b10:	1ccd      	adds	r5, r1, #3
 8000b12:	f025 0503 	bic.w	r5, r5, #3
 8000b16:	3508      	adds	r5, #8
 8000b18:	2d0c      	cmp	r5, #12
 8000b1a:	bf38      	it	cc
 8000b1c:	250c      	movcc	r5, #12
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	4606      	mov	r6, r0
 8000b22:	db01      	blt.n	8000b28 <_malloc_r+0x1c>
 8000b24:	42a9      	cmp	r1, r5
 8000b26:	d904      	bls.n	8000b32 <_malloc_r+0x26>
 8000b28:	230c      	movs	r3, #12
 8000b2a:	6033      	str	r3, [r6, #0]
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c08 <_malloc_r+0xfc>
 8000b36:	f000 f9f5 	bl	8000f24 <__malloc_lock>
 8000b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b3e:	461c      	mov	r4, r3
 8000b40:	bb44      	cbnz	r4, 8000b94 <_malloc_r+0x88>
 8000b42:	4629      	mov	r1, r5
 8000b44:	4630      	mov	r0, r6
 8000b46:	f7ff ffbf 	bl	8000ac8 <sbrk_aligned>
 8000b4a:	1c43      	adds	r3, r0, #1
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	d158      	bne.n	8000c02 <_malloc_r+0xf6>
 8000b50:	f8d8 4000 	ldr.w	r4, [r8]
 8000b54:	4627      	mov	r7, r4
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d143      	bne.n	8000be2 <_malloc_r+0xd6>
 8000b5a:	2c00      	cmp	r4, #0
 8000b5c:	d04b      	beq.n	8000bf6 <_malloc_r+0xea>
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	4639      	mov	r1, r7
 8000b62:	4630      	mov	r0, r6
 8000b64:	eb04 0903 	add.w	r9, r4, r3
 8000b68:	f000 fa30 	bl	8000fcc <_sbrk_r>
 8000b6c:	4581      	cmp	r9, r0
 8000b6e:	d142      	bne.n	8000bf6 <_malloc_r+0xea>
 8000b70:	6821      	ldr	r1, [r4, #0]
 8000b72:	1a6d      	subs	r5, r5, r1
 8000b74:	4629      	mov	r1, r5
 8000b76:	4630      	mov	r0, r6
 8000b78:	f7ff ffa6 	bl	8000ac8 <sbrk_aligned>
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	d03a      	beq.n	8000bf6 <_malloc_r+0xea>
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	442b      	add	r3, r5
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	f8d8 3000 	ldr.w	r3, [r8]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	bb62      	cbnz	r2, 8000be8 <_malloc_r+0xdc>
 8000b8e:	f8c8 7000 	str.w	r7, [r8]
 8000b92:	e00f      	b.n	8000bb4 <_malloc_r+0xa8>
 8000b94:	6822      	ldr	r2, [r4, #0]
 8000b96:	1b52      	subs	r2, r2, r5
 8000b98:	d420      	bmi.n	8000bdc <_malloc_r+0xd0>
 8000b9a:	2a0b      	cmp	r2, #11
 8000b9c:	d917      	bls.n	8000bce <_malloc_r+0xc2>
 8000b9e:	1961      	adds	r1, r4, r5
 8000ba0:	42a3      	cmp	r3, r4
 8000ba2:	6025      	str	r5, [r4, #0]
 8000ba4:	bf18      	it	ne
 8000ba6:	6059      	strne	r1, [r3, #4]
 8000ba8:	6863      	ldr	r3, [r4, #4]
 8000baa:	bf08      	it	eq
 8000bac:	f8c8 1000 	streq.w	r1, [r8]
 8000bb0:	5162      	str	r2, [r4, r5]
 8000bb2:	604b      	str	r3, [r1, #4]
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f000 f9bb 	bl	8000f30 <__malloc_unlock>
 8000bba:	f104 000b 	add.w	r0, r4, #11
 8000bbe:	1d23      	adds	r3, r4, #4
 8000bc0:	f020 0007 	bic.w	r0, r0, #7
 8000bc4:	1ac2      	subs	r2, r0, r3
 8000bc6:	bf1c      	itt	ne
 8000bc8:	1a1b      	subne	r3, r3, r0
 8000bca:	50a3      	strne	r3, [r4, r2]
 8000bcc:	e7af      	b.n	8000b2e <_malloc_r+0x22>
 8000bce:	6862      	ldr	r2, [r4, #4]
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	bf0c      	ite	eq
 8000bd4:	f8c8 2000 	streq.w	r2, [r8]
 8000bd8:	605a      	strne	r2, [r3, #4]
 8000bda:	e7eb      	b.n	8000bb4 <_malloc_r+0xa8>
 8000bdc:	4623      	mov	r3, r4
 8000bde:	6864      	ldr	r4, [r4, #4]
 8000be0:	e7ae      	b.n	8000b40 <_malloc_r+0x34>
 8000be2:	463c      	mov	r4, r7
 8000be4:	687f      	ldr	r7, [r7, #4]
 8000be6:	e7b6      	b.n	8000b56 <_malloc_r+0x4a>
 8000be8:	461a      	mov	r2, r3
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d1fb      	bne.n	8000be8 <_malloc_r+0xdc>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	6053      	str	r3, [r2, #4]
 8000bf4:	e7de      	b.n	8000bb4 <_malloc_r+0xa8>
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	6033      	str	r3, [r6, #0]
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	f000 f998 	bl	8000f30 <__malloc_unlock>
 8000c00:	e794      	b.n	8000b2c <_malloc_r+0x20>
 8000c02:	6005      	str	r5, [r0, #0]
 8000c04:	e7d6      	b.n	8000bb4 <_malloc_r+0xa8>
 8000c06:	bf00      	nop
 8000c08:	200001b0 	.word	0x200001b0

08000c0c <_printf_common>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	4616      	mov	r6, r2
 8000c12:	4698      	mov	r8, r3
 8000c14:	688a      	ldr	r2, [r1, #8]
 8000c16:	690b      	ldr	r3, [r1, #16]
 8000c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	bfb8      	it	lt
 8000c20:	4613      	movlt	r3, r2
 8000c22:	6033      	str	r3, [r6, #0]
 8000c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c28:	4607      	mov	r7, r0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	b10a      	cbz	r2, 8000c32 <_printf_common+0x26>
 8000c2e:	3301      	adds	r3, #1
 8000c30:	6033      	str	r3, [r6, #0]
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	0699      	lsls	r1, r3, #26
 8000c36:	bf42      	ittt	mi
 8000c38:	6833      	ldrmi	r3, [r6, #0]
 8000c3a:	3302      	addmi	r3, #2
 8000c3c:	6033      	strmi	r3, [r6, #0]
 8000c3e:	6825      	ldr	r5, [r4, #0]
 8000c40:	f015 0506 	ands.w	r5, r5, #6
 8000c44:	d106      	bne.n	8000c54 <_printf_common+0x48>
 8000c46:	f104 0a19 	add.w	sl, r4, #25
 8000c4a:	68e3      	ldr	r3, [r4, #12]
 8000c4c:	6832      	ldr	r2, [r6, #0]
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	dc26      	bgt.n	8000ca2 <_printf_common+0x96>
 8000c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c58:	6822      	ldr	r2, [r4, #0]
 8000c5a:	3b00      	subs	r3, #0
 8000c5c:	bf18      	it	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	0692      	lsls	r2, r2, #26
 8000c62:	d42b      	bmi.n	8000cbc <_printf_common+0xb0>
 8000c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c68:	4641      	mov	r1, r8
 8000c6a:	4638      	mov	r0, r7
 8000c6c:	47c8      	blx	r9
 8000c6e:	3001      	adds	r0, #1
 8000c70:	d01e      	beq.n	8000cb0 <_printf_common+0xa4>
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	6922      	ldr	r2, [r4, #16]
 8000c76:	f003 0306 	and.w	r3, r3, #6
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf02      	ittt	eq
 8000c7e:	68e5      	ldreq	r5, [r4, #12]
 8000c80:	6833      	ldreq	r3, [r6, #0]
 8000c82:	1aed      	subeq	r5, r5, r3
 8000c84:	68a3      	ldr	r3, [r4, #8]
 8000c86:	bf0c      	ite	eq
 8000c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c8c:	2500      	movne	r5, #0
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	bfc4      	itt	gt
 8000c92:	1a9b      	subgt	r3, r3, r2
 8000c94:	18ed      	addgt	r5, r5, r3
 8000c96:	2600      	movs	r6, #0
 8000c98:	341a      	adds	r4, #26
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d11a      	bne.n	8000cd4 <_printf_common+0xc8>
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	e008      	b.n	8000cb4 <_printf_common+0xa8>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	4638      	mov	r0, r7
 8000caa:	47c8      	blx	r9
 8000cac:	3001      	adds	r0, #1
 8000cae:	d103      	bne.n	8000cb8 <_printf_common+0xac>
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7c6      	b.n	8000c4a <_printf_common+0x3e>
 8000cbc:	18e1      	adds	r1, r4, r3
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	2030      	movs	r0, #48	@ 0x30
 8000cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cc6:	4422      	add	r2, r4
 8000cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	e7c7      	b.n	8000c64 <_printf_common+0x58>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	4622      	mov	r2, r4
 8000cd8:	4641      	mov	r1, r8
 8000cda:	4638      	mov	r0, r7
 8000cdc:	47c8      	blx	r9
 8000cde:	3001      	adds	r0, #1
 8000ce0:	d0e6      	beq.n	8000cb0 <_printf_common+0xa4>
 8000ce2:	3601      	adds	r6, #1
 8000ce4:	e7d9      	b.n	8000c9a <_printf_common+0x8e>
	...

08000ce8 <_printf_i>:
 8000ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	7e0f      	ldrb	r7, [r1, #24]
 8000cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cf0:	2f78      	cmp	r7, #120	@ 0x78
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	4680      	mov	r8, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	469a      	mov	sl, r3
 8000cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cfe:	d807      	bhi.n	8000d10 <_printf_i+0x28>
 8000d00:	2f62      	cmp	r7, #98	@ 0x62
 8000d02:	d80a      	bhi.n	8000d1a <_printf_i+0x32>
 8000d04:	2f00      	cmp	r7, #0
 8000d06:	f000 80d1 	beq.w	8000eac <_printf_i+0x1c4>
 8000d0a:	2f58      	cmp	r7, #88	@ 0x58
 8000d0c:	f000 80b8 	beq.w	8000e80 <_printf_i+0x198>
 8000d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d18:	e03a      	b.n	8000d90 <_printf_i+0xa8>
 8000d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d1e:	2b15      	cmp	r3, #21
 8000d20:	d8f6      	bhi.n	8000d10 <_printf_i+0x28>
 8000d22:	a101      	add	r1, pc, #4	@ (adr r1, 8000d28 <_printf_i+0x40>)
 8000d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d28:	08000d81 	.word	0x08000d81
 8000d2c:	08000d95 	.word	0x08000d95
 8000d30:	08000d11 	.word	0x08000d11
 8000d34:	08000d11 	.word	0x08000d11
 8000d38:	08000d11 	.word	0x08000d11
 8000d3c:	08000d11 	.word	0x08000d11
 8000d40:	08000d95 	.word	0x08000d95
 8000d44:	08000d11 	.word	0x08000d11
 8000d48:	08000d11 	.word	0x08000d11
 8000d4c:	08000d11 	.word	0x08000d11
 8000d50:	08000d11 	.word	0x08000d11
 8000d54:	08000e93 	.word	0x08000e93
 8000d58:	08000dbf 	.word	0x08000dbf
 8000d5c:	08000e4d 	.word	0x08000e4d
 8000d60:	08000d11 	.word	0x08000d11
 8000d64:	08000d11 	.word	0x08000d11
 8000d68:	08000eb5 	.word	0x08000eb5
 8000d6c:	08000d11 	.word	0x08000d11
 8000d70:	08000dbf 	.word	0x08000dbf
 8000d74:	08000d11 	.word	0x08000d11
 8000d78:	08000d11 	.word	0x08000d11
 8000d7c:	08000e55 	.word	0x08000e55
 8000d80:	6833      	ldr	r3, [r6, #0]
 8000d82:	1d1a      	adds	r2, r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6032      	str	r2, [r6, #0]
 8000d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d90:	2301      	movs	r3, #1
 8000d92:	e09c      	b.n	8000ece <_printf_i+0x1e6>
 8000d94:	6833      	ldr	r3, [r6, #0]
 8000d96:	6820      	ldr	r0, [r4, #0]
 8000d98:	1d19      	adds	r1, r3, #4
 8000d9a:	6031      	str	r1, [r6, #0]
 8000d9c:	0606      	lsls	r6, r0, #24
 8000d9e:	d501      	bpl.n	8000da4 <_printf_i+0xbc>
 8000da0:	681d      	ldr	r5, [r3, #0]
 8000da2:	e003      	b.n	8000dac <_printf_i+0xc4>
 8000da4:	0645      	lsls	r5, r0, #25
 8000da6:	d5fb      	bpl.n	8000da0 <_printf_i+0xb8>
 8000da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	da03      	bge.n	8000db8 <_printf_i+0xd0>
 8000db0:	232d      	movs	r3, #45	@ 0x2d
 8000db2:	426d      	negs	r5, r5
 8000db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000db8:	4858      	ldr	r0, [pc, #352]	@ (8000f1c <_printf_i+0x234>)
 8000dba:	230a      	movs	r3, #10
 8000dbc:	e011      	b.n	8000de2 <_printf_i+0xfa>
 8000dbe:	6821      	ldr	r1, [r4, #0]
 8000dc0:	6833      	ldr	r3, [r6, #0]
 8000dc2:	0608      	lsls	r0, r1, #24
 8000dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000dc8:	d402      	bmi.n	8000dd0 <_printf_i+0xe8>
 8000dca:	0649      	lsls	r1, r1, #25
 8000dcc:	bf48      	it	mi
 8000dce:	b2ad      	uxthmi	r5, r5
 8000dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dd2:	4852      	ldr	r0, [pc, #328]	@ (8000f1c <_printf_i+0x234>)
 8000dd4:	6033      	str	r3, [r6, #0]
 8000dd6:	bf14      	ite	ne
 8000dd8:	230a      	movne	r3, #10
 8000dda:	2308      	moveq	r3, #8
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000de2:	6866      	ldr	r6, [r4, #4]
 8000de4:	60a6      	str	r6, [r4, #8]
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	db05      	blt.n	8000df6 <_printf_i+0x10e>
 8000dea:	6821      	ldr	r1, [r4, #0]
 8000dec:	432e      	orrs	r6, r5
 8000dee:	f021 0104 	bic.w	r1, r1, #4
 8000df2:	6021      	str	r1, [r4, #0]
 8000df4:	d04b      	beq.n	8000e8e <_printf_i+0x1a6>
 8000df6:	4616      	mov	r6, r2
 8000df8:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dfc:	fb03 5711 	mls	r7, r3, r1, r5
 8000e00:	5dc7      	ldrb	r7, [r0, r7]
 8000e02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e06:	462f      	mov	r7, r5
 8000e08:	42bb      	cmp	r3, r7
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	d9f4      	bls.n	8000df8 <_printf_i+0x110>
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d10b      	bne.n	8000e2a <_printf_i+0x142>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	07df      	lsls	r7, r3, #31
 8000e16:	d508      	bpl.n	8000e2a <_printf_i+0x142>
 8000e18:	6923      	ldr	r3, [r4, #16]
 8000e1a:	6861      	ldr	r1, [r4, #4]
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	bfde      	ittt	le
 8000e20:	2330      	movle	r3, #48	@ 0x30
 8000e22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e2a:	1b92      	subs	r2, r2, r6
 8000e2c:	6122      	str	r2, [r4, #16]
 8000e2e:	f8cd a000 	str.w	sl, [sp]
 8000e32:	464b      	mov	r3, r9
 8000e34:	aa03      	add	r2, sp, #12
 8000e36:	4621      	mov	r1, r4
 8000e38:	4640      	mov	r0, r8
 8000e3a:	f7ff fee7 	bl	8000c0c <_printf_common>
 8000e3e:	3001      	adds	r0, #1
 8000e40:	d14a      	bne.n	8000ed8 <_printf_i+0x1f0>
 8000e42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e46:	b004      	add	sp, #16
 8000e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	6023      	str	r3, [r4, #0]
 8000e54:	4832      	ldr	r0, [pc, #200]	@ (8000f20 <_printf_i+0x238>)
 8000e56:	2778      	movs	r7, #120	@ 0x78
 8000e58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	6831      	ldr	r1, [r6, #0]
 8000e60:	061f      	lsls	r7, r3, #24
 8000e62:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e66:	d402      	bmi.n	8000e6e <_printf_i+0x186>
 8000e68:	065f      	lsls	r7, r3, #25
 8000e6a:	bf48      	it	mi
 8000e6c:	b2ad      	uxthmi	r5, r5
 8000e6e:	6031      	str	r1, [r6, #0]
 8000e70:	07d9      	lsls	r1, r3, #31
 8000e72:	bf44      	itt	mi
 8000e74:	f043 0320 	orrmi.w	r3, r3, #32
 8000e78:	6023      	strmi	r3, [r4, #0]
 8000e7a:	b11d      	cbz	r5, 8000e84 <_printf_i+0x19c>
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	e7ad      	b.n	8000ddc <_printf_i+0xf4>
 8000e80:	4826      	ldr	r0, [pc, #152]	@ (8000f1c <_printf_i+0x234>)
 8000e82:	e7e9      	b.n	8000e58 <_printf_i+0x170>
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	f023 0320 	bic.w	r3, r3, #32
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	e7f6      	b.n	8000e7c <_printf_i+0x194>
 8000e8e:	4616      	mov	r6, r2
 8000e90:	e7bd      	b.n	8000e0e <_printf_i+0x126>
 8000e92:	6833      	ldr	r3, [r6, #0]
 8000e94:	6825      	ldr	r5, [r4, #0]
 8000e96:	6961      	ldr	r1, [r4, #20]
 8000e98:	1d18      	adds	r0, r3, #4
 8000e9a:	6030      	str	r0, [r6, #0]
 8000e9c:	062e      	lsls	r6, r5, #24
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	d501      	bpl.n	8000ea6 <_printf_i+0x1be>
 8000ea2:	6019      	str	r1, [r3, #0]
 8000ea4:	e002      	b.n	8000eac <_printf_i+0x1c4>
 8000ea6:	0668      	lsls	r0, r5, #25
 8000ea8:	d5fb      	bpl.n	8000ea2 <_printf_i+0x1ba>
 8000eaa:	8019      	strh	r1, [r3, #0]
 8000eac:	2300      	movs	r3, #0
 8000eae:	6123      	str	r3, [r4, #16]
 8000eb0:	4616      	mov	r6, r2
 8000eb2:	e7bc      	b.n	8000e2e <_printf_i+0x146>
 8000eb4:	6833      	ldr	r3, [r6, #0]
 8000eb6:	1d1a      	adds	r2, r3, #4
 8000eb8:	6032      	str	r2, [r6, #0]
 8000eba:	681e      	ldr	r6, [r3, #0]
 8000ebc:	6862      	ldr	r2, [r4, #4]
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	f7ff f98d 	bl	80001e0 <memchr>
 8000ec6:	b108      	cbz	r0, 8000ecc <_printf_i+0x1e4>
 8000ec8:	1b80      	subs	r0, r0, r6
 8000eca:	6060      	str	r0, [r4, #4]
 8000ecc:	6863      	ldr	r3, [r4, #4]
 8000ece:	6123      	str	r3, [r4, #16]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ed6:	e7aa      	b.n	8000e2e <_printf_i+0x146>
 8000ed8:	6923      	ldr	r3, [r4, #16]
 8000eda:	4632      	mov	r2, r6
 8000edc:	4649      	mov	r1, r9
 8000ede:	4640      	mov	r0, r8
 8000ee0:	47d0      	blx	sl
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d0ad      	beq.n	8000e42 <_printf_i+0x15a>
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	079b      	lsls	r3, r3, #30
 8000eea:	d413      	bmi.n	8000f14 <_printf_i+0x22c>
 8000eec:	68e0      	ldr	r0, [r4, #12]
 8000eee:	9b03      	ldr	r3, [sp, #12]
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	bfb8      	it	lt
 8000ef4:	4618      	movlt	r0, r3
 8000ef6:	e7a6      	b.n	8000e46 <_printf_i+0x15e>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	4632      	mov	r2, r6
 8000efc:	4649      	mov	r1, r9
 8000efe:	4640      	mov	r0, r8
 8000f00:	47d0      	blx	sl
 8000f02:	3001      	adds	r0, #1
 8000f04:	d09d      	beq.n	8000e42 <_printf_i+0x15a>
 8000f06:	3501      	adds	r5, #1
 8000f08:	68e3      	ldr	r3, [r4, #12]
 8000f0a:	9903      	ldr	r1, [sp, #12]
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	42ab      	cmp	r3, r5
 8000f10:	dcf2      	bgt.n	8000ef8 <_printf_i+0x210>
 8000f12:	e7eb      	b.n	8000eec <_printf_i+0x204>
 8000f14:	2500      	movs	r5, #0
 8000f16:	f104 0619 	add.w	r6, r4, #25
 8000f1a:	e7f5      	b.n	8000f08 <_printf_i+0x220>
 8000f1c:	080010ea 	.word	0x080010ea
 8000f20:	080010fb 	.word	0x080010fb

08000f24 <__malloc_lock>:
 8000f24:	4801      	ldr	r0, [pc, #4]	@ (8000f2c <__malloc_lock+0x8>)
 8000f26:	f7ff bc75 	b.w	8000814 <__retarget_lock_acquire_recursive>
 8000f2a:	bf00      	nop
 8000f2c:	200001a8 	.word	0x200001a8

08000f30 <__malloc_unlock>:
 8000f30:	4801      	ldr	r0, [pc, #4]	@ (8000f38 <__malloc_unlock+0x8>)
 8000f32:	f7ff bc70 	b.w	8000816 <__retarget_lock_release_recursive>
 8000f36:	bf00      	nop
 8000f38:	200001a8 	.word	0x200001a8

08000f3c <_realloc_r>:
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	4607      	mov	r7, r0
 8000f42:	4614      	mov	r4, r2
 8000f44:	460d      	mov	r5, r1
 8000f46:	b921      	cbnz	r1, 8000f52 <_realloc_r+0x16>
 8000f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	f7ff bddd 	b.w	8000b0c <_malloc_r>
 8000f52:	b92a      	cbnz	r2, 8000f60 <_realloc_r+0x24>
 8000f54:	f000 f858 	bl	8001008 <_free_r>
 8000f58:	4625      	mov	r5, r4
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f60:	f000 f89c 	bl	800109c <_malloc_usable_size_r>
 8000f64:	4284      	cmp	r4, r0
 8000f66:	4606      	mov	r6, r0
 8000f68:	d802      	bhi.n	8000f70 <_realloc_r+0x34>
 8000f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f6e:	d8f4      	bhi.n	8000f5a <_realloc_r+0x1e>
 8000f70:	4621      	mov	r1, r4
 8000f72:	4638      	mov	r0, r7
 8000f74:	f7ff fdca 	bl	8000b0c <_malloc_r>
 8000f78:	4680      	mov	r8, r0
 8000f7a:	b908      	cbnz	r0, 8000f80 <_realloc_r+0x44>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ec      	b.n	8000f5a <_realloc_r+0x1e>
 8000f80:	42b4      	cmp	r4, r6
 8000f82:	4622      	mov	r2, r4
 8000f84:	4629      	mov	r1, r5
 8000f86:	bf28      	it	cs
 8000f88:	4632      	movcs	r2, r6
 8000f8a:	f000 f82f 	bl	8000fec <memcpy>
 8000f8e:	4629      	mov	r1, r5
 8000f90:	4638      	mov	r0, r7
 8000f92:	f000 f839 	bl	8001008 <_free_r>
 8000f96:	e7f1      	b.n	8000f7c <_realloc_r+0x40>

08000f98 <memmove>:
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	b510      	push	{r4, lr}
 8000f9c:	eb01 0402 	add.w	r4, r1, r2
 8000fa0:	d902      	bls.n	8000fa8 <memmove+0x10>
 8000fa2:	4284      	cmp	r4, r0
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	d807      	bhi.n	8000fb8 <memmove+0x20>
 8000fa8:	1e43      	subs	r3, r0, #1
 8000faa:	42a1      	cmp	r1, r4
 8000fac:	d008      	beq.n	8000fc0 <memmove+0x28>
 8000fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fb6:	e7f8      	b.n	8000faa <memmove+0x12>
 8000fb8:	4402      	add	r2, r0
 8000fba:	4601      	mov	r1, r0
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d100      	bne.n	8000fc2 <memmove+0x2a>
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fca:	e7f7      	b.n	8000fbc <memmove+0x24>

08000fcc <_sbrk_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d06      	ldr	r5, [pc, #24]	@ (8000fe8 <_sbrk_r+0x1c>)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	602b      	str	r3, [r5, #0]
 8000fd8:	f7ff fa14 	bl	8000404 <_sbrk>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d102      	bne.n	8000fe6 <_sbrk_r+0x1a>
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	b103      	cbz	r3, 8000fe6 <_sbrk_r+0x1a>
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
 8000fe8:	200001b4 	.word	0x200001b4

08000fec <memcpy>:
 8000fec:	440a      	add	r2, r1
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000ff4:	d100      	bne.n	8000ff8 <memcpy+0xc>
 8000ff6:	4770      	bx	lr
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001002:	4291      	cmp	r1, r2
 8001004:	d1f9      	bne.n	8000ffa <memcpy+0xe>
 8001006:	bd10      	pop	{r4, pc}

08001008 <_free_r>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4605      	mov	r5, r0
 800100c:	2900      	cmp	r1, #0
 800100e:	d041      	beq.n	8001094 <_free_r+0x8c>
 8001010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001014:	1f0c      	subs	r4, r1, #4
 8001016:	2b00      	cmp	r3, #0
 8001018:	bfb8      	it	lt
 800101a:	18e4      	addlt	r4, r4, r3
 800101c:	f7ff ff82 	bl	8000f24 <__malloc_lock>
 8001020:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <_free_r+0x90>)
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	b933      	cbnz	r3, 8001034 <_free_r+0x2c>
 8001026:	6063      	str	r3, [r4, #4]
 8001028:	6014      	str	r4, [r2, #0]
 800102a:	4628      	mov	r0, r5
 800102c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001030:	f7ff bf7e 	b.w	8000f30 <__malloc_unlock>
 8001034:	42a3      	cmp	r3, r4
 8001036:	d908      	bls.n	800104a <_free_r+0x42>
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	1821      	adds	r1, r4, r0
 800103c:	428b      	cmp	r3, r1
 800103e:	bf01      	itttt	eq
 8001040:	6819      	ldreq	r1, [r3, #0]
 8001042:	685b      	ldreq	r3, [r3, #4]
 8001044:	1809      	addeq	r1, r1, r0
 8001046:	6021      	streq	r1, [r4, #0]
 8001048:	e7ed      	b.n	8001026 <_free_r+0x1e>
 800104a:	461a      	mov	r2, r3
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	b10b      	cbz	r3, 8001054 <_free_r+0x4c>
 8001050:	42a3      	cmp	r3, r4
 8001052:	d9fa      	bls.n	800104a <_free_r+0x42>
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	1850      	adds	r0, r2, r1
 8001058:	42a0      	cmp	r0, r4
 800105a:	d10b      	bne.n	8001074 <_free_r+0x6c>
 800105c:	6820      	ldr	r0, [r4, #0]
 800105e:	4401      	add	r1, r0
 8001060:	1850      	adds	r0, r2, r1
 8001062:	4283      	cmp	r3, r0
 8001064:	6011      	str	r1, [r2, #0]
 8001066:	d1e0      	bne.n	800102a <_free_r+0x22>
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	6053      	str	r3, [r2, #4]
 800106e:	4408      	add	r0, r1
 8001070:	6010      	str	r0, [r2, #0]
 8001072:	e7da      	b.n	800102a <_free_r+0x22>
 8001074:	d902      	bls.n	800107c <_free_r+0x74>
 8001076:	230c      	movs	r3, #12
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	e7d6      	b.n	800102a <_free_r+0x22>
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	1821      	adds	r1, r4, r0
 8001080:	428b      	cmp	r3, r1
 8001082:	bf04      	itt	eq
 8001084:	6819      	ldreq	r1, [r3, #0]
 8001086:	685b      	ldreq	r3, [r3, #4]
 8001088:	6063      	str	r3, [r4, #4]
 800108a:	bf04      	itt	eq
 800108c:	1809      	addeq	r1, r1, r0
 800108e:	6021      	streq	r1, [r4, #0]
 8001090:	6054      	str	r4, [r2, #4]
 8001092:	e7ca      	b.n	800102a <_free_r+0x22>
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop
 8001098:	200001b0 	.word	0x200001b0

0800109c <_malloc_usable_size_r>:
 800109c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010a0:	1f18      	subs	r0, r3, #4
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bfbc      	itt	lt
 80010a6:	580b      	ldrlt	r3, [r1, r0]
 80010a8:	18c0      	addlt	r0, r0, r3
 80010aa:	4770      	bx	lr

080010ac <_init>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr

080010b8 <_fini>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	bf00      	nop
 80010bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010be:	bc08      	pop	{r3}
 80010c0:	469e      	mov	lr, r3
 80010c2:	4770      	bx	lr
