
10-Combined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001024  08001024  00002024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001070  08001070  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001070  08001070  00002070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001078  08001078  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001078  08001078  00002078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800107c  0800107c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001080  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000050  080010d0  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080010d0  000031bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010aa  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000678  00000000  00000000  0000412a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000047a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010a  00000000  00000000  00004940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e76f  00000000  00000000  00004a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002380  00000000  00000000  000131b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053ff1  00000000  00000000  00015539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006952a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000904  00000000  00000000  00069570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00069e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800100c 	.word	0x0800100c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	0800100c 	.word	0x0800100c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <adc_init>:
#define CR2_ADON_BIT            0
#define CR2_SWSTART_BIT         30
#define SR_EOC_BIT              1

void adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 8000284:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <adc_init+0x60>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <adc_init+0x60>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Set PA1 to Analog mode (MODER2 = 0b11) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER1_BIT, MODER_FIELD_WIDTH), FIELD_VAL(ANALOG, MODER1_BIT));
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <adc_init+0x64>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <adc_init+0x64>)
 8000296:	f043 030c 	orr.w	r3, r3, #12
 800029a:	6013      	str	r3, [r2, #0]
	/*Enable clock access to adc1 */
    BIT_SET(RCC->APB2ENR, ADC1EN_BIT);
 800029c:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <adc_init+0x60>)
 800029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002a0:	4a0f      	ldr	r2, [pc, #60]	@ (80002e0 <adc_init+0x60>)
 80002a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a6:	6453      	str	r3, [r2, #68]	@ 0x44
    /*Clear SQR3 */
    ADC1->SQR3 = 0;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <adc_init+0x68>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	635a      	str	r2, [r3, #52]	@ 0x34
    /*Set SQ1 = channel 1 (bits [4:0]) */
    FIELD_SET(ADC1->SQR3, BIT_MASK(SQR3_SQ1_BIT, ADC_SQ_FIELD_WIDTH), FIELD_VAL(ADC1_CH1, SQR3_SQ1_BIT));  // SQ1 = 1
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <adc_init+0x68>)
 80002b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002b2:	f023 031f 	bic.w	r3, r3, #31
 80002b6:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <adc_init+0x68>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6353      	str	r3, [r2, #52]	@ 0x34
    // Clear L[3:0] in SQR1 (1 conversion => L = 0)
    FIELD_SET(ADC1->SQR1, BIT_MASK(20, 4), FIELD_VAL(0, 20));
 80002be:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <adc_init+0x68>)
 80002c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002c2:	4a09      	ldr	r2, [pc, #36]	@ (80002e8 <adc_init+0x68>)
 80002c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80002c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /*Enable ADC Module */
    BIT_SET(ADC1->CR2, CR2_ADON_BIT);
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <adc_init+0x68>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a06      	ldr	r2, [pc, #24]	@ (80002e8 <adc_init+0x68>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6093      	str	r3, [r2, #8]
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40012000 	.word	0x40012000

080002ec <start_conversion>:

void start_conversion(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
    BIT_SET(ADC1->CR2, CR2_SWSTART_BIT);
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <start_conversion+0x1c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <start_conversion+0x1c>)
 80002f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40012000 	.word	0x40012000

0800030c <adc_read>:

uint32_t adc_read(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
    /*Make sure the conversion ended*/
    while (IS_BIT_CLEAR(ADC1->SR, SR_EOC_BIT)) {}
 8000310:	bf00      	nop
 8000312:	4b06      	ldr	r3, [pc, #24]	@ (800032c <adc_read+0x20>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0302 	and.w	r3, r3, #2
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f9      	beq.n	8000312 <adc_read+0x6>

    return (uint32_t)ADC1->DR;
 800031e:	4b03      	ldr	r3, [pc, #12]	@ (800032c <adc_read+0x20>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40012000 	.word	0x40012000

08000330 <adc_get_sample>:

uint32_t adc_get_sample(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
    start_conversion();
 8000334:	f7ff ffda 	bl	80002ec <start_conversion>
    return adc_read();
 8000338:	f7ff ffe8 	bl	800030c <adc_read>
 800033c:	4603      	mov	r3, r0
}
 800033e:	4618      	mov	r0, r3
 8000340:	bd80      	pop	{r7, pc}

08000342 <drv_init>:
#include "gpio.h"
#include "uart.h"
#include "adc.h"

void drv_init(void)
{
 8000342:	b580      	push	{r7, lr}
 8000344:	af00      	add	r7, sp, #0
    gpio_init();
 8000346:	f000 f807 	bl	8000358 <gpio_init>
    uart2_init();
 800034a:	f000 f923 	bl	8000594 <uart2_init>
    adc_init();
 800034e:	f7ff ff97 	bl	8000280 <adc_init>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <gpio_init>:
#define MODER5_BIT              (PIN5*MODER_FIELD_WIDTH)
#define MODER13_BIT             (PIN13*MODER_FIELD_WIDTH)


void gpio_init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <gpio_init+0x44>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a0e      	ldr	r2, [pc, #56]	@ (800039c <gpio_init+0x44>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30
    BIT_SET(RCC->AHB1ENR, GPIOCEN_BIT);
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <gpio_init+0x44>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a0b      	ldr	r2, [pc, #44]	@ (800039c <gpio_init+0x44>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
    /* Set PA5 to output mode (MODER5 = 0b01) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER5_BIT, MODER_FIELD_WIDTH), FIELD_VAL(OUTPUT, MODER5_BIT));
 8000374:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <gpio_init+0x48>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800037c:	4a08      	ldr	r2, [pc, #32]	@ (80003a0 <gpio_init+0x48>)
 800037e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000382:	6013      	str	r3, [r2, #0]
    /* Set PC13 to input mode (MODER5 = 0b00) */
    FIELD_SET(GPIOC->MODER, BIT_MASK(MODER13_BIT, MODER_FIELD_WIDTH), FIELD_VAL(INPUT, MODER13_BIT));
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <gpio_init+0x4c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <gpio_init+0x4c>)
 800038a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020000 	.word	0x40020000
 80003a4:	40020800 	.word	0x40020800

080003a8 <main>:
#include "system.h"

uint32_t sensor_value;

int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
    sys_init();
 80003ae:	f000 f853 	bl	8000458 <sys_init>

    while (1)
    {
        sensor_value = adc_get_sample();
 80003b2:	f7ff ffbd 	bl	8000330 <adc_get_sample>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a09      	ldr	r2, [pc, #36]	@ (80003e0 <main+0x38>)
 80003ba:	6013      	str	r3, [r2, #0]
        uart2_printf("[SENSOR] ADC CH1 = %lu\r\n", sensor_value);
 80003bc:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <main+0x38>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4619      	mov	r1, r3
 80003c2:	4808      	ldr	r0, [pc, #32]	@ (80003e4 <main+0x3c>)
 80003c4:	f000 f92b 	bl	800061e <uart2_printf>
        for (volatile int i = 0; i < 100000; ++i);
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	e002      	b.n	80003d4 <main+0x2c>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a04      	ldr	r2, [pc, #16]	@ (80003e8 <main+0x40>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	ddf8      	ble.n	80003ce <main+0x26>
        sensor_value = adc_get_sample();
 80003dc:	e7e9      	b.n	80003b2 <main+0xa>
 80003de:	bf00      	nop
 80003e0:	2000006c 	.word	0x2000006c
 80003e4:	08001024 	.word	0x08001024
 80003e8:	0001869f 	.word	0x0001869f

080003ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f4:	4a14      	ldr	r2, [pc, #80]	@ (8000448 <_sbrk+0x5c>)
 80003f6:	4b15      	ldr	r3, [pc, #84]	@ (800044c <_sbrk+0x60>)
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <_sbrk+0x64>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d102      	bne.n	800040e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <_sbrk+0x64>)
 800040a:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <_sbrk+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800040e:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <_sbrk+0x64>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	693a      	ldr	r2, [r7, #16]
 8000418:	429a      	cmp	r2, r3
 800041a:	d207      	bcs.n	800042c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800041c:	f000 f980 	bl	8000720 <__errno>
 8000420:	4603      	mov	r3, r0
 8000422:	220c      	movs	r2, #12
 8000424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800042a:	e009      	b.n	8000440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800042c:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000432:	4b07      	ldr	r3, [pc, #28]	@ (8000450 <_sbrk+0x64>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <_sbrk+0x64>)
 800043c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800043e:	68fb      	ldr	r3, [r7, #12]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20018000 	.word	0x20018000
 800044c:	00000400 	.word	0x00000400
 8000450:	20000070 	.word	0x20000070
 8000454:	200001c0 	.word	0x200001c0

08000458 <sys_init>:
#include "system.h"
#include "config.h"


void sys_init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    #ifdef STM32_NUC
    drv_init();
 800045c:	f7ff ff71 	bl	8000342 <drv_init>
    #endif
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <uart2_gpio_config>:
static void uart2_enable_rx(void);
static void uart2_enable(void);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

static void uart2_gpio_config(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA */
    BIT_SET(RCC->AHB1ENR, GPIOAEN_BIT);
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <uart2_gpio_config+0x5c>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <uart2_gpio_config+0x5c>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Set PA2 to Alternate Function mode (MODER2 = 0b10) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER2_BIT, MODER_FIELD_WIDTH), FIELD_VAL(ALTERNATE, MODER2_BIT));
 8000474:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <uart2_gpio_config+0x60>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800047c:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <uart2_gpio_config+0x60>)
 800047e:	f043 0320 	orr.w	r3, r3, #32
 8000482:	6013      	str	r3, [r2, #0]
    /* Set PA2 AF to AF7 (USART2_TX) → AFR[0] bits 11:8 = 0111 */
    FIELD_SET(GPIOA->AFR[0], BIT_MASK(AFRL2_BIT, AFR_FIELD_WIDTH), FIELD_VAL(AF7, AFRL2_BIT));
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <uart2_gpio_config+0x60>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800048c:	4a0d      	ldr	r2, [pc, #52]	@ (80004c4 <uart2_gpio_config+0x60>)
 800048e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000492:	6213      	str	r3, [r2, #32]
    /* Set PA3 to Alternate Function mode (MODER2 = 0b10) */
    FIELD_SET(GPIOA->MODER, BIT_MASK(MODER3_BIT, MODER_FIELD_WIDTH), FIELD_VAL(ALTERNATE, MODER3_BIT));
 8000494:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <uart2_gpio_config+0x60>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800049c:	4a09      	ldr	r2, [pc, #36]	@ (80004c4 <uart2_gpio_config+0x60>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a2:	6013      	str	r3, [r2, #0]
    /* Set PA3 AF to AF7 (USART2_RX) → AFR[0] bits 15:12 = 0111 */
    FIELD_SET(GPIOA->AFR[0], BIT_MASK(AFRL3_BIT, AFR_FIELD_WIDTH), FIELD_VAL(AF7, AFRL3_BIT));
 80004a4:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <uart2_gpio_config+0x60>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80004ac:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <uart2_gpio_config+0x60>)
 80004ae:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80004b2:	6213      	str	r3, [r2, #32]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020000 	.word	0x40020000

080004c8 <uart2_clock_enable>:

static void uart2_clock_enable(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	/*Enable clock access to uart2 */
    BIT_SET(RCC->APB1ENR, UART2EN_BIT);
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <uart2_clock_enable+0x1c>)
 80004ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <uart2_clock_enable+0x1c>)
 80004d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800

080004e8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	085a      	lsrs	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	441a      	add	r2, r3
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	b29b      	uxth	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <uart2_baudrate_config>:

static void uart2_baudrate_config(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
    /*Configure baudrate*/
    USARTx->BRR =  compute_uart_bd(PeriphClk, BaudRate);
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	68b8      	ldr	r0, [r7, #8]
 800051e:	f7ff ffe3 	bl	80004e8 <compute_uart_bd>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	609a      	str	r2, [r3, #8]

}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <uart2_enable_tx>:

static void uart2_enable_tx(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	/*Configure the transfer direction*/
	BIT_SET(USART2->CR1, CR1_TE_BIT);
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <uart2_enable_tx+0x1c>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <uart2_enable_tx+0x1c>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40004400 	.word	0x40004400

08000554 <uart2_enable_rx>:

static void uart2_enable_rx(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	/*Configure the transfer direction*/
	BIT_SET(USART2->CR1, CR1_RE_BIT);
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <uart2_enable_rx+0x1c>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	@ (8000570 <uart2_enable_rx+0x1c>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	60d3      	str	r3, [r2, #12]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40004400 	.word	0x40004400

08000574 <uart2_enable>:

static void uart2_enable(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    /*Enable uart module*/
    BIT_SET(USART2->CR1, CR1_UE_BIT);
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <uart2_enable+0x1c>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <uart2_enable+0x1c>)
 800057e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000582:	60d3      	str	r3, [r2, #12]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40004400 	.word	0x40004400

08000594 <uart2_init>:

void uart2_init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
    uart2_gpio_config();
 8000598:	f7ff ff64 	bl	8000464 <uart2_gpio_config>
    uart2_clock_enable();
 800059c:	f7ff ff94 	bl	80004c8 <uart2_clock_enable>
    uart2_baudrate_config(USART2, APB1_CLK, UART_BAUDRATE);
 80005a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a4:	4905      	ldr	r1, [pc, #20]	@ (80005bc <uart2_init+0x28>)
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <uart2_init+0x2c>)
 80005a8:	f7ff ffb1 	bl	800050e <uart2_baudrate_config>
    uart2_enable_tx();
 80005ac:	f7ff ffc2 	bl	8000534 <uart2_enable_tx>
    uart2_enable_rx();
 80005b0:	f7ff ffd0 	bl	8000554 <uart2_enable_rx>
    uart2_enable();
 80005b4:	f7ff ffde 	bl	8000574 <uart2_enable>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	00f42400 	.word	0x00f42400
 80005c0:	40004400 	.word	0x40004400

080005c4 <uart2_write>:

    return (char)USART2->DR;
}

void uart2_write(const char ch)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
    /*Make sure the transmit data register is empty*/
    while (IS_BIT_CLEAR(USART2->SR, SR_TXE_BIT)) {}
 80005ce:	bf00      	nop
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <uart2_write+0x2c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0f9      	beq.n	80005d0 <uart2_write+0xc>

    /*Write to transmit data register*/
    USART2->DR	=  (ch & 0xFF);
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <uart2_write+0x2c>)
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	6053      	str	r3, [r2, #4]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40004400 	.word	0x40004400

080005f4 <uart2_write_string>:

void uart2_write_string(const char* str)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    while (*str)
 80005fc:	e006      	b.n	800060c <uart2_write_string+0x18>
    {
        uart2_write(*str++);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffdc 	bl	80005c4 <uart2_write>
    while (*str)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f4      	bne.n	80005fe <uart2_write_string+0xa>
    }
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <uart2_printf>:

void uart2_printf(const char *format, ...)
{
 800061e:	b40f      	push	{r0, r1, r2, r3}
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a2      	sub	sp, #136	@ 0x88
 8000624:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8000626:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800062a:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800062c:	f107 0008 	add.w	r0, r7, #8
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	f000 f864 	bl	8000704 <vsniprintf>
    va_end(args);
    uart2_write_string(buffer);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffd7 	bl	80005f4 <uart2_write_string>
 8000646:	bf00      	nop
 8000648:	3788      	adds	r7, #136	@ 0x88
 800064a:	46bd      	mov	sp, r7
 800064c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000650:	b004      	add	sp, #16
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	@ (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 f853 	bl	800072c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fe8f 	bl	80003a8 <main>

0800068a <LoopForever>:

LoopForever:
  b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000698:	08001080 	.word	0x08001080
  ldr r2, =_sbss
 800069c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80006a0:	200001bc 	.word	0x200001bc

080006a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC_IRQHandler>

080006a6 <_vsniprintf_r>:
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	4614      	mov	r4, r2
 80006aa:	2c00      	cmp	r4, #0
 80006ac:	b09b      	sub	sp, #108	@ 0x6c
 80006ae:	4605      	mov	r5, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	da05      	bge.n	80006c0 <_vsniprintf_r+0x1a>
 80006b4:	238b      	movs	r3, #139	@ 0x8b
 80006b6:	6003      	str	r3, [r0, #0]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006bc:	b01b      	add	sp, #108	@ 0x6c
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80006c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80006ce:	bf14      	ite	ne
 80006d0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80006d4:	4623      	moveq	r3, r4
 80006d6:	9302      	str	r3, [sp, #8]
 80006d8:	9305      	str	r3, [sp, #20]
 80006da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006de:	9100      	str	r1, [sp, #0]
 80006e0:	9104      	str	r1, [sp, #16]
 80006e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80006e6:	4669      	mov	r1, sp
 80006e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80006ea:	f000 f8a1 	bl	8000830 <_svfiprintf_r>
 80006ee:	1c43      	adds	r3, r0, #1
 80006f0:	bfbc      	itt	lt
 80006f2:	238b      	movlt	r3, #139	@ 0x8b
 80006f4:	602b      	strlt	r3, [r5, #0]
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d0e0      	beq.n	80006bc <_vsniprintf_r+0x16>
 80006fa:	9b00      	ldr	r3, [sp, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e7dc      	b.n	80006bc <_vsniprintf_r+0x16>
	...

08000704 <vsniprintf>:
 8000704:	b507      	push	{r0, r1, r2, lr}
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4613      	mov	r3, r2
 800070a:	460a      	mov	r2, r1
 800070c:	4601      	mov	r1, r0
 800070e:	4803      	ldr	r0, [pc, #12]	@ (800071c <vsniprintf+0x18>)
 8000710:	6800      	ldr	r0, [r0, #0]
 8000712:	f7ff ffc8 	bl	80006a6 <_vsniprintf_r>
 8000716:	b003      	add	sp, #12
 8000718:	f85d fb04 	ldr.w	pc, [sp], #4
 800071c:	20000000 	.word	0x20000000

08000720 <__errno>:
 8000720:	4b01      	ldr	r3, [pc, #4]	@ (8000728 <__errno+0x8>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <__libc_init_array>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	4d0d      	ldr	r5, [pc, #52]	@ (8000764 <__libc_init_array+0x38>)
 8000730:	4c0d      	ldr	r4, [pc, #52]	@ (8000768 <__libc_init_array+0x3c>)
 8000732:	1b64      	subs	r4, r4, r5
 8000734:	10a4      	asrs	r4, r4, #2
 8000736:	2600      	movs	r6, #0
 8000738:	42a6      	cmp	r6, r4
 800073a:	d109      	bne.n	8000750 <__libc_init_array+0x24>
 800073c:	4d0b      	ldr	r5, [pc, #44]	@ (800076c <__libc_init_array+0x40>)
 800073e:	4c0c      	ldr	r4, [pc, #48]	@ (8000770 <__libc_init_array+0x44>)
 8000740:	f000 fc64 	bl	800100c <_init>
 8000744:	1b64      	subs	r4, r4, r5
 8000746:	10a4      	asrs	r4, r4, #2
 8000748:	2600      	movs	r6, #0
 800074a:	42a6      	cmp	r6, r4
 800074c:	d105      	bne.n	800075a <__libc_init_array+0x2e>
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f855 3b04 	ldr.w	r3, [r5], #4
 8000754:	4798      	blx	r3
 8000756:	3601      	adds	r6, #1
 8000758:	e7ee      	b.n	8000738 <__libc_init_array+0xc>
 800075a:	f855 3b04 	ldr.w	r3, [r5], #4
 800075e:	4798      	blx	r3
 8000760:	3601      	adds	r6, #1
 8000762:	e7f2      	b.n	800074a <__libc_init_array+0x1e>
 8000764:	08001078 	.word	0x08001078
 8000768:	08001078 	.word	0x08001078
 800076c:	08001078 	.word	0x08001078
 8000770:	0800107c 	.word	0x0800107c

08000774 <__retarget_lock_acquire_recursive>:
 8000774:	4770      	bx	lr

08000776 <__retarget_lock_release_recursive>:
 8000776:	4770      	bx	lr

08000778 <__ssputs_r>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	688e      	ldr	r6, [r1, #8]
 800077e:	461f      	mov	r7, r3
 8000780:	42be      	cmp	r6, r7
 8000782:	680b      	ldr	r3, [r1, #0]
 8000784:	4682      	mov	sl, r0
 8000786:	460c      	mov	r4, r1
 8000788:	4690      	mov	r8, r2
 800078a:	d82d      	bhi.n	80007e8 <__ssputs_r+0x70>
 800078c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000794:	d026      	beq.n	80007e4 <__ssputs_r+0x6c>
 8000796:	6965      	ldr	r5, [r4, #20]
 8000798:	6909      	ldr	r1, [r1, #16]
 800079a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800079e:	eba3 0901 	sub.w	r9, r3, r1
 80007a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007a6:	1c7b      	adds	r3, r7, #1
 80007a8:	444b      	add	r3, r9
 80007aa:	106d      	asrs	r5, r5, #1
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf38      	it	cc
 80007b0:	461d      	movcc	r5, r3
 80007b2:	0553      	lsls	r3, r2, #21
 80007b4:	d527      	bpl.n	8000806 <__ssputs_r+0x8e>
 80007b6:	4629      	mov	r1, r5
 80007b8:	f000 f958 	bl	8000a6c <_malloc_r>
 80007bc:	4606      	mov	r6, r0
 80007be:	b360      	cbz	r0, 800081a <__ssputs_r+0xa2>
 80007c0:	6921      	ldr	r1, [r4, #16]
 80007c2:	464a      	mov	r2, r9
 80007c4:	f000 fbc2 	bl	8000f4c <memcpy>
 80007c8:	89a3      	ldrh	r3, [r4, #12]
 80007ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80007ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d2:	81a3      	strh	r3, [r4, #12]
 80007d4:	6126      	str	r6, [r4, #16]
 80007d6:	6165      	str	r5, [r4, #20]
 80007d8:	444e      	add	r6, r9
 80007da:	eba5 0509 	sub.w	r5, r5, r9
 80007de:	6026      	str	r6, [r4, #0]
 80007e0:	60a5      	str	r5, [r4, #8]
 80007e2:	463e      	mov	r6, r7
 80007e4:	42be      	cmp	r6, r7
 80007e6:	d900      	bls.n	80007ea <__ssputs_r+0x72>
 80007e8:	463e      	mov	r6, r7
 80007ea:	6820      	ldr	r0, [r4, #0]
 80007ec:	4632      	mov	r2, r6
 80007ee:	4641      	mov	r1, r8
 80007f0:	f000 fb82 	bl	8000ef8 <memmove>
 80007f4:	68a3      	ldr	r3, [r4, #8]
 80007f6:	1b9b      	subs	r3, r3, r6
 80007f8:	60a3      	str	r3, [r4, #8]
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	4433      	add	r3, r6
 80007fe:	6023      	str	r3, [r4, #0]
 8000800:	2000      	movs	r0, #0
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000806:	462a      	mov	r2, r5
 8000808:	f000 fb48 	bl	8000e9c <_realloc_r>
 800080c:	4606      	mov	r6, r0
 800080e:	2800      	cmp	r0, #0
 8000810:	d1e0      	bne.n	80007d4 <__ssputs_r+0x5c>
 8000812:	6921      	ldr	r1, [r4, #16]
 8000814:	4650      	mov	r0, sl
 8000816:	f000 fba7 	bl	8000f68 <_free_r>
 800081a:	230c      	movs	r3, #12
 800081c:	f8ca 3000 	str.w	r3, [sl]
 8000820:	89a3      	ldrh	r3, [r4, #12]
 8000822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000826:	81a3      	strh	r3, [r4, #12]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800082c:	e7e9      	b.n	8000802 <__ssputs_r+0x8a>
	...

08000830 <_svfiprintf_r>:
 8000830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000834:	4698      	mov	r8, r3
 8000836:	898b      	ldrh	r3, [r1, #12]
 8000838:	061b      	lsls	r3, r3, #24
 800083a:	b09d      	sub	sp, #116	@ 0x74
 800083c:	4607      	mov	r7, r0
 800083e:	460d      	mov	r5, r1
 8000840:	4614      	mov	r4, r2
 8000842:	d510      	bpl.n	8000866 <_svfiprintf_r+0x36>
 8000844:	690b      	ldr	r3, [r1, #16]
 8000846:	b973      	cbnz	r3, 8000866 <_svfiprintf_r+0x36>
 8000848:	2140      	movs	r1, #64	@ 0x40
 800084a:	f000 f90f 	bl	8000a6c <_malloc_r>
 800084e:	6028      	str	r0, [r5, #0]
 8000850:	6128      	str	r0, [r5, #16]
 8000852:	b930      	cbnz	r0, 8000862 <_svfiprintf_r+0x32>
 8000854:	230c      	movs	r3, #12
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800085c:	b01d      	add	sp, #116	@ 0x74
 800085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000862:	2340      	movs	r3, #64	@ 0x40
 8000864:	616b      	str	r3, [r5, #20]
 8000866:	2300      	movs	r3, #0
 8000868:	9309      	str	r3, [sp, #36]	@ 0x24
 800086a:	2320      	movs	r3, #32
 800086c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000870:	f8cd 800c 	str.w	r8, [sp, #12]
 8000874:	2330      	movs	r3, #48	@ 0x30
 8000876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000a14 <_svfiprintf_r+0x1e4>
 800087a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800087e:	f04f 0901 	mov.w	r9, #1
 8000882:	4623      	mov	r3, r4
 8000884:	469a      	mov	sl, r3
 8000886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800088a:	b10a      	cbz	r2, 8000890 <_svfiprintf_r+0x60>
 800088c:	2a25      	cmp	r2, #37	@ 0x25
 800088e:	d1f9      	bne.n	8000884 <_svfiprintf_r+0x54>
 8000890:	ebba 0b04 	subs.w	fp, sl, r4
 8000894:	d00b      	beq.n	80008ae <_svfiprintf_r+0x7e>
 8000896:	465b      	mov	r3, fp
 8000898:	4622      	mov	r2, r4
 800089a:	4629      	mov	r1, r5
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff ff6b 	bl	8000778 <__ssputs_r>
 80008a2:	3001      	adds	r0, #1
 80008a4:	f000 80a7 	beq.w	80009f6 <_svfiprintf_r+0x1c6>
 80008a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80008aa:	445a      	add	r2, fp
 80008ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80008ae:	f89a 3000 	ldrb.w	r3, [sl]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 809f 	beq.w	80009f6 <_svfiprintf_r+0x1c6>
 80008b8:	2300      	movs	r3, #0
 80008ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008c2:	f10a 0a01 	add.w	sl, sl, #1
 80008c6:	9304      	str	r3, [sp, #16]
 80008c8:	9307      	str	r3, [sp, #28]
 80008ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80008ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80008d0:	4654      	mov	r4, sl
 80008d2:	2205      	movs	r2, #5
 80008d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008d8:	484e      	ldr	r0, [pc, #312]	@ (8000a14 <_svfiprintf_r+0x1e4>)
 80008da:	f7ff fc81 	bl	80001e0 <memchr>
 80008de:	9a04      	ldr	r2, [sp, #16]
 80008e0:	b9d8      	cbnz	r0, 800091a <_svfiprintf_r+0xea>
 80008e2:	06d0      	lsls	r0, r2, #27
 80008e4:	bf44      	itt	mi
 80008e6:	2320      	movmi	r3, #32
 80008e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80008ec:	0711      	lsls	r1, r2, #28
 80008ee:	bf44      	itt	mi
 80008f0:	232b      	movmi	r3, #43	@ 0x2b
 80008f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80008f6:	f89a 3000 	ldrb.w	r3, [sl]
 80008fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80008fc:	d015      	beq.n	800092a <_svfiprintf_r+0xfa>
 80008fe:	9a07      	ldr	r2, [sp, #28]
 8000900:	4654      	mov	r4, sl
 8000902:	2000      	movs	r0, #0
 8000904:	f04f 0c0a 	mov.w	ip, #10
 8000908:	4621      	mov	r1, r4
 800090a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800090e:	3b30      	subs	r3, #48	@ 0x30
 8000910:	2b09      	cmp	r3, #9
 8000912:	d94b      	bls.n	80009ac <_svfiprintf_r+0x17c>
 8000914:	b1b0      	cbz	r0, 8000944 <_svfiprintf_r+0x114>
 8000916:	9207      	str	r2, [sp, #28]
 8000918:	e014      	b.n	8000944 <_svfiprintf_r+0x114>
 800091a:	eba0 0308 	sub.w	r3, r0, r8
 800091e:	fa09 f303 	lsl.w	r3, r9, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	9304      	str	r3, [sp, #16]
 8000926:	46a2      	mov	sl, r4
 8000928:	e7d2      	b.n	80008d0 <_svfiprintf_r+0xa0>
 800092a:	9b03      	ldr	r3, [sp, #12]
 800092c:	1d19      	adds	r1, r3, #4
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	9103      	str	r1, [sp, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	bfbb      	ittet	lt
 8000936:	425b      	neglt	r3, r3
 8000938:	f042 0202 	orrlt.w	r2, r2, #2
 800093c:	9307      	strge	r3, [sp, #28]
 800093e:	9307      	strlt	r3, [sp, #28]
 8000940:	bfb8      	it	lt
 8000942:	9204      	strlt	r2, [sp, #16]
 8000944:	7823      	ldrb	r3, [r4, #0]
 8000946:	2b2e      	cmp	r3, #46	@ 0x2e
 8000948:	d10a      	bne.n	8000960 <_svfiprintf_r+0x130>
 800094a:	7863      	ldrb	r3, [r4, #1]
 800094c:	2b2a      	cmp	r3, #42	@ 0x2a
 800094e:	d132      	bne.n	80009b6 <_svfiprintf_r+0x186>
 8000950:	9b03      	ldr	r3, [sp, #12]
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	9203      	str	r2, [sp, #12]
 8000958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800095c:	3402      	adds	r4, #2
 800095e:	9305      	str	r3, [sp, #20]
 8000960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000a24 <_svfiprintf_r+0x1f4>
 8000964:	7821      	ldrb	r1, [r4, #0]
 8000966:	2203      	movs	r2, #3
 8000968:	4650      	mov	r0, sl
 800096a:	f7ff fc39 	bl	80001e0 <memchr>
 800096e:	b138      	cbz	r0, 8000980 <_svfiprintf_r+0x150>
 8000970:	9b04      	ldr	r3, [sp, #16]
 8000972:	eba0 000a 	sub.w	r0, r0, sl
 8000976:	2240      	movs	r2, #64	@ 0x40
 8000978:	4082      	lsls	r2, r0
 800097a:	4313      	orrs	r3, r2
 800097c:	3401      	adds	r4, #1
 800097e:	9304      	str	r3, [sp, #16]
 8000980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000984:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <_svfiprintf_r+0x1e8>)
 8000986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800098a:	2206      	movs	r2, #6
 800098c:	f7ff fc28 	bl	80001e0 <memchr>
 8000990:	2800      	cmp	r0, #0
 8000992:	d036      	beq.n	8000a02 <_svfiprintf_r+0x1d2>
 8000994:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <_svfiprintf_r+0x1ec>)
 8000996:	bb1b      	cbnz	r3, 80009e0 <_svfiprintf_r+0x1b0>
 8000998:	9b03      	ldr	r3, [sp, #12]
 800099a:	3307      	adds	r3, #7
 800099c:	f023 0307 	bic.w	r3, r3, #7
 80009a0:	3308      	adds	r3, #8
 80009a2:	9303      	str	r3, [sp, #12]
 80009a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80009a6:	4433      	add	r3, r6
 80009a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80009aa:	e76a      	b.n	8000882 <_svfiprintf_r+0x52>
 80009ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80009b0:	460c      	mov	r4, r1
 80009b2:	2001      	movs	r0, #1
 80009b4:	e7a8      	b.n	8000908 <_svfiprintf_r+0xd8>
 80009b6:	2300      	movs	r3, #0
 80009b8:	3401      	adds	r4, #1
 80009ba:	9305      	str	r3, [sp, #20]
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 0c0a 	mov.w	ip, #10
 80009c2:	4620      	mov	r0, r4
 80009c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009c8:	3a30      	subs	r2, #48	@ 0x30
 80009ca:	2a09      	cmp	r2, #9
 80009cc:	d903      	bls.n	80009d6 <_svfiprintf_r+0x1a6>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0c6      	beq.n	8000960 <_svfiprintf_r+0x130>
 80009d2:	9105      	str	r1, [sp, #20]
 80009d4:	e7c4      	b.n	8000960 <_svfiprintf_r+0x130>
 80009d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80009da:	4604      	mov	r4, r0
 80009dc:	2301      	movs	r3, #1
 80009de:	e7f0      	b.n	80009c2 <_svfiprintf_r+0x192>
 80009e0:	ab03      	add	r3, sp, #12
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	462a      	mov	r2, r5
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <_svfiprintf_r+0x1f0>)
 80009e8:	a904      	add	r1, sp, #16
 80009ea:	4638      	mov	r0, r7
 80009ec:	f3af 8000 	nop.w
 80009f0:	1c42      	adds	r2, r0, #1
 80009f2:	4606      	mov	r6, r0
 80009f4:	d1d6      	bne.n	80009a4 <_svfiprintf_r+0x174>
 80009f6:	89ab      	ldrh	r3, [r5, #12]
 80009f8:	065b      	lsls	r3, r3, #25
 80009fa:	f53f af2d 	bmi.w	8000858 <_svfiprintf_r+0x28>
 80009fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a00:	e72c      	b.n	800085c <_svfiprintf_r+0x2c>
 8000a02:	ab03      	add	r3, sp, #12
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	462a      	mov	r2, r5
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <_svfiprintf_r+0x1f0>)
 8000a0a:	a904      	add	r1, sp, #16
 8000a0c:	4638      	mov	r0, r7
 8000a0e:	f000 f91b 	bl	8000c48 <_printf_i>
 8000a12:	e7ed      	b.n	80009f0 <_svfiprintf_r+0x1c0>
 8000a14:	0800103d 	.word	0x0800103d
 8000a18:	08001047 	.word	0x08001047
 8000a1c:	00000000 	.word	0x00000000
 8000a20:	08000779 	.word	0x08000779
 8000a24:	08001043 	.word	0x08001043

08000a28 <sbrk_aligned>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a68 <sbrk_aligned+0x40>)
 8000a2c:	460c      	mov	r4, r1
 8000a2e:	6831      	ldr	r1, [r6, #0]
 8000a30:	4605      	mov	r5, r0
 8000a32:	b911      	cbnz	r1, 8000a3a <sbrk_aligned+0x12>
 8000a34:	f000 fa7a 	bl	8000f2c <_sbrk_r>
 8000a38:	6030      	str	r0, [r6, #0]
 8000a3a:	4621      	mov	r1, r4
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	f000 fa75 	bl	8000f2c <_sbrk_r>
 8000a42:	1c43      	adds	r3, r0, #1
 8000a44:	d103      	bne.n	8000a4e <sbrk_aligned+0x26>
 8000a46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
 8000a4e:	1cc4      	adds	r4, r0, #3
 8000a50:	f024 0403 	bic.w	r4, r4, #3
 8000a54:	42a0      	cmp	r0, r4
 8000a56:	d0f8      	beq.n	8000a4a <sbrk_aligned+0x22>
 8000a58:	1a21      	subs	r1, r4, r0
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f000 fa66 	bl	8000f2c <_sbrk_r>
 8000a60:	3001      	adds	r0, #1
 8000a62:	d1f2      	bne.n	8000a4a <sbrk_aligned+0x22>
 8000a64:	e7ef      	b.n	8000a46 <sbrk_aligned+0x1e>
 8000a66:	bf00      	nop
 8000a68:	200001b0 	.word	0x200001b0

08000a6c <_malloc_r>:
 8000a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a70:	1ccd      	adds	r5, r1, #3
 8000a72:	f025 0503 	bic.w	r5, r5, #3
 8000a76:	3508      	adds	r5, #8
 8000a78:	2d0c      	cmp	r5, #12
 8000a7a:	bf38      	it	cc
 8000a7c:	250c      	movcc	r5, #12
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	4606      	mov	r6, r0
 8000a82:	db01      	blt.n	8000a88 <_malloc_r+0x1c>
 8000a84:	42a9      	cmp	r1, r5
 8000a86:	d904      	bls.n	8000a92 <_malloc_r+0x26>
 8000a88:	230c      	movs	r3, #12
 8000a8a:	6033      	str	r3, [r6, #0]
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b68 <_malloc_r+0xfc>
 8000a96:	f000 f9f5 	bl	8000e84 <__malloc_lock>
 8000a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a9e:	461c      	mov	r4, r3
 8000aa0:	bb44      	cbnz	r4, 8000af4 <_malloc_r+0x88>
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f7ff ffbf 	bl	8000a28 <sbrk_aligned>
 8000aaa:	1c43      	adds	r3, r0, #1
 8000aac:	4604      	mov	r4, r0
 8000aae:	d158      	bne.n	8000b62 <_malloc_r+0xf6>
 8000ab0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ab4:	4627      	mov	r7, r4
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d143      	bne.n	8000b42 <_malloc_r+0xd6>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d04b      	beq.n	8000b56 <_malloc_r+0xea>
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	4639      	mov	r1, r7
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	eb04 0903 	add.w	r9, r4, r3
 8000ac8:	f000 fa30 	bl	8000f2c <_sbrk_r>
 8000acc:	4581      	cmp	r9, r0
 8000ace:	d142      	bne.n	8000b56 <_malloc_r+0xea>
 8000ad0:	6821      	ldr	r1, [r4, #0]
 8000ad2:	1a6d      	subs	r5, r5, r1
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	f7ff ffa6 	bl	8000a28 <sbrk_aligned>
 8000adc:	3001      	adds	r0, #1
 8000ade:	d03a      	beq.n	8000b56 <_malloc_r+0xea>
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	442b      	add	r3, r5
 8000ae4:	6023      	str	r3, [r4, #0]
 8000ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	bb62      	cbnz	r2, 8000b48 <_malloc_r+0xdc>
 8000aee:	f8c8 7000 	str.w	r7, [r8]
 8000af2:	e00f      	b.n	8000b14 <_malloc_r+0xa8>
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	1b52      	subs	r2, r2, r5
 8000af8:	d420      	bmi.n	8000b3c <_malloc_r+0xd0>
 8000afa:	2a0b      	cmp	r2, #11
 8000afc:	d917      	bls.n	8000b2e <_malloc_r+0xc2>
 8000afe:	1961      	adds	r1, r4, r5
 8000b00:	42a3      	cmp	r3, r4
 8000b02:	6025      	str	r5, [r4, #0]
 8000b04:	bf18      	it	ne
 8000b06:	6059      	strne	r1, [r3, #4]
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	bf08      	it	eq
 8000b0c:	f8c8 1000 	streq.w	r1, [r8]
 8000b10:	5162      	str	r2, [r4, r5]
 8000b12:	604b      	str	r3, [r1, #4]
 8000b14:	4630      	mov	r0, r6
 8000b16:	f000 f9bb 	bl	8000e90 <__malloc_unlock>
 8000b1a:	f104 000b 	add.w	r0, r4, #11
 8000b1e:	1d23      	adds	r3, r4, #4
 8000b20:	f020 0007 	bic.w	r0, r0, #7
 8000b24:	1ac2      	subs	r2, r0, r3
 8000b26:	bf1c      	itt	ne
 8000b28:	1a1b      	subne	r3, r3, r0
 8000b2a:	50a3      	strne	r3, [r4, r2]
 8000b2c:	e7af      	b.n	8000a8e <_malloc_r+0x22>
 8000b2e:	6862      	ldr	r2, [r4, #4]
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	bf0c      	ite	eq
 8000b34:	f8c8 2000 	streq.w	r2, [r8]
 8000b38:	605a      	strne	r2, [r3, #4]
 8000b3a:	e7eb      	b.n	8000b14 <_malloc_r+0xa8>
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	6864      	ldr	r4, [r4, #4]
 8000b40:	e7ae      	b.n	8000aa0 <_malloc_r+0x34>
 8000b42:	463c      	mov	r4, r7
 8000b44:	687f      	ldr	r7, [r7, #4]
 8000b46:	e7b6      	b.n	8000ab6 <_malloc_r+0x4a>
 8000b48:	461a      	mov	r2, r3
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d1fb      	bne.n	8000b48 <_malloc_r+0xdc>
 8000b50:	2300      	movs	r3, #0
 8000b52:	6053      	str	r3, [r2, #4]
 8000b54:	e7de      	b.n	8000b14 <_malloc_r+0xa8>
 8000b56:	230c      	movs	r3, #12
 8000b58:	6033      	str	r3, [r6, #0]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f000 f998 	bl	8000e90 <__malloc_unlock>
 8000b60:	e794      	b.n	8000a8c <_malloc_r+0x20>
 8000b62:	6005      	str	r5, [r0, #0]
 8000b64:	e7d6      	b.n	8000b14 <_malloc_r+0xa8>
 8000b66:	bf00      	nop
 8000b68:	200001b4 	.word	0x200001b4

08000b6c <_printf_common>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	4616      	mov	r6, r2
 8000b72:	4698      	mov	r8, r3
 8000b74:	688a      	ldr	r2, [r1, #8]
 8000b76:	690b      	ldr	r3, [r1, #16]
 8000b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	bfb8      	it	lt
 8000b80:	4613      	movlt	r3, r2
 8000b82:	6033      	str	r3, [r6, #0]
 8000b84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b88:	4607      	mov	r7, r0
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	b10a      	cbz	r2, 8000b92 <_printf_common+0x26>
 8000b8e:	3301      	adds	r3, #1
 8000b90:	6033      	str	r3, [r6, #0]
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	0699      	lsls	r1, r3, #26
 8000b96:	bf42      	ittt	mi
 8000b98:	6833      	ldrmi	r3, [r6, #0]
 8000b9a:	3302      	addmi	r3, #2
 8000b9c:	6033      	strmi	r3, [r6, #0]
 8000b9e:	6825      	ldr	r5, [r4, #0]
 8000ba0:	f015 0506 	ands.w	r5, r5, #6
 8000ba4:	d106      	bne.n	8000bb4 <_printf_common+0x48>
 8000ba6:	f104 0a19 	add.w	sl, r4, #25
 8000baa:	68e3      	ldr	r3, [r4, #12]
 8000bac:	6832      	ldr	r2, [r6, #0]
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	dc26      	bgt.n	8000c02 <_printf_common+0x96>
 8000bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000bb8:	6822      	ldr	r2, [r4, #0]
 8000bba:	3b00      	subs	r3, #0
 8000bbc:	bf18      	it	ne
 8000bbe:	2301      	movne	r3, #1
 8000bc0:	0692      	lsls	r2, r2, #26
 8000bc2:	d42b      	bmi.n	8000c1c <_printf_common+0xb0>
 8000bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bc8:	4641      	mov	r1, r8
 8000bca:	4638      	mov	r0, r7
 8000bcc:	47c8      	blx	r9
 8000bce:	3001      	adds	r0, #1
 8000bd0:	d01e      	beq.n	8000c10 <_printf_common+0xa4>
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	6922      	ldr	r2, [r4, #16]
 8000bd6:	f003 0306 	and.w	r3, r3, #6
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf02      	ittt	eq
 8000bde:	68e5      	ldreq	r5, [r4, #12]
 8000be0:	6833      	ldreq	r3, [r6, #0]
 8000be2:	1aed      	subeq	r5, r5, r3
 8000be4:	68a3      	ldr	r3, [r4, #8]
 8000be6:	bf0c      	ite	eq
 8000be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bec:	2500      	movne	r5, #0
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	bfc4      	itt	gt
 8000bf2:	1a9b      	subgt	r3, r3, r2
 8000bf4:	18ed      	addgt	r5, r5, r3
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	341a      	adds	r4, #26
 8000bfa:	42b5      	cmp	r5, r6
 8000bfc:	d11a      	bne.n	8000c34 <_printf_common+0xc8>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	e008      	b.n	8000c14 <_printf_common+0xa8>
 8000c02:	2301      	movs	r3, #1
 8000c04:	4652      	mov	r2, sl
 8000c06:	4641      	mov	r1, r8
 8000c08:	4638      	mov	r0, r7
 8000c0a:	47c8      	blx	r9
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	d103      	bne.n	8000c18 <_printf_common+0xac>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	3501      	adds	r5, #1
 8000c1a:	e7c6      	b.n	8000baa <_printf_common+0x3e>
 8000c1c:	18e1      	adds	r1, r4, r3
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	2030      	movs	r0, #48	@ 0x30
 8000c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c26:	4422      	add	r2, r4
 8000c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c30:	3302      	adds	r3, #2
 8000c32:	e7c7      	b.n	8000bc4 <_printf_common+0x58>
 8000c34:	2301      	movs	r3, #1
 8000c36:	4622      	mov	r2, r4
 8000c38:	4641      	mov	r1, r8
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	47c8      	blx	r9
 8000c3e:	3001      	adds	r0, #1
 8000c40:	d0e6      	beq.n	8000c10 <_printf_common+0xa4>
 8000c42:	3601      	adds	r6, #1
 8000c44:	e7d9      	b.n	8000bfa <_printf_common+0x8e>
	...

08000c48 <_printf_i>:
 8000c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	7e0f      	ldrb	r7, [r1, #24]
 8000c4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c50:	2f78      	cmp	r7, #120	@ 0x78
 8000c52:	4691      	mov	r9, r2
 8000c54:	4680      	mov	r8, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	469a      	mov	sl, r3
 8000c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c5e:	d807      	bhi.n	8000c70 <_printf_i+0x28>
 8000c60:	2f62      	cmp	r7, #98	@ 0x62
 8000c62:	d80a      	bhi.n	8000c7a <_printf_i+0x32>
 8000c64:	2f00      	cmp	r7, #0
 8000c66:	f000 80d1 	beq.w	8000e0c <_printf_i+0x1c4>
 8000c6a:	2f58      	cmp	r7, #88	@ 0x58
 8000c6c:	f000 80b8 	beq.w	8000de0 <_printf_i+0x198>
 8000c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c78:	e03a      	b.n	8000cf0 <_printf_i+0xa8>
 8000c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c7e:	2b15      	cmp	r3, #21
 8000c80:	d8f6      	bhi.n	8000c70 <_printf_i+0x28>
 8000c82:	a101      	add	r1, pc, #4	@ (adr r1, 8000c88 <_printf_i+0x40>)
 8000c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c88:	08000ce1 	.word	0x08000ce1
 8000c8c:	08000cf5 	.word	0x08000cf5
 8000c90:	08000c71 	.word	0x08000c71
 8000c94:	08000c71 	.word	0x08000c71
 8000c98:	08000c71 	.word	0x08000c71
 8000c9c:	08000c71 	.word	0x08000c71
 8000ca0:	08000cf5 	.word	0x08000cf5
 8000ca4:	08000c71 	.word	0x08000c71
 8000ca8:	08000c71 	.word	0x08000c71
 8000cac:	08000c71 	.word	0x08000c71
 8000cb0:	08000c71 	.word	0x08000c71
 8000cb4:	08000df3 	.word	0x08000df3
 8000cb8:	08000d1f 	.word	0x08000d1f
 8000cbc:	08000dad 	.word	0x08000dad
 8000cc0:	08000c71 	.word	0x08000c71
 8000cc4:	08000c71 	.word	0x08000c71
 8000cc8:	08000e15 	.word	0x08000e15
 8000ccc:	08000c71 	.word	0x08000c71
 8000cd0:	08000d1f 	.word	0x08000d1f
 8000cd4:	08000c71 	.word	0x08000c71
 8000cd8:	08000c71 	.word	0x08000c71
 8000cdc:	08000db5 	.word	0x08000db5
 8000ce0:	6833      	ldr	r3, [r6, #0]
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6032      	str	r2, [r6, #0]
 8000ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e09c      	b.n	8000e2e <_printf_i+0x1e6>
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	6820      	ldr	r0, [r4, #0]
 8000cf8:	1d19      	adds	r1, r3, #4
 8000cfa:	6031      	str	r1, [r6, #0]
 8000cfc:	0606      	lsls	r6, r0, #24
 8000cfe:	d501      	bpl.n	8000d04 <_printf_i+0xbc>
 8000d00:	681d      	ldr	r5, [r3, #0]
 8000d02:	e003      	b.n	8000d0c <_printf_i+0xc4>
 8000d04:	0645      	lsls	r5, r0, #25
 8000d06:	d5fb      	bpl.n	8000d00 <_printf_i+0xb8>
 8000d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	da03      	bge.n	8000d18 <_printf_i+0xd0>
 8000d10:	232d      	movs	r3, #45	@ 0x2d
 8000d12:	426d      	negs	r5, r5
 8000d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d18:	4858      	ldr	r0, [pc, #352]	@ (8000e7c <_printf_i+0x234>)
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	e011      	b.n	8000d42 <_printf_i+0xfa>
 8000d1e:	6821      	ldr	r1, [r4, #0]
 8000d20:	6833      	ldr	r3, [r6, #0]
 8000d22:	0608      	lsls	r0, r1, #24
 8000d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d28:	d402      	bmi.n	8000d30 <_printf_i+0xe8>
 8000d2a:	0649      	lsls	r1, r1, #25
 8000d2c:	bf48      	it	mi
 8000d2e:	b2ad      	uxthmi	r5, r5
 8000d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d32:	4852      	ldr	r0, [pc, #328]	@ (8000e7c <_printf_i+0x234>)
 8000d34:	6033      	str	r3, [r6, #0]
 8000d36:	bf14      	ite	ne
 8000d38:	230a      	movne	r3, #10
 8000d3a:	2308      	moveq	r3, #8
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d42:	6866      	ldr	r6, [r4, #4]
 8000d44:	60a6      	str	r6, [r4, #8]
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	db05      	blt.n	8000d56 <_printf_i+0x10e>
 8000d4a:	6821      	ldr	r1, [r4, #0]
 8000d4c:	432e      	orrs	r6, r5
 8000d4e:	f021 0104 	bic.w	r1, r1, #4
 8000d52:	6021      	str	r1, [r4, #0]
 8000d54:	d04b      	beq.n	8000dee <_printf_i+0x1a6>
 8000d56:	4616      	mov	r6, r2
 8000d58:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d5c:	fb03 5711 	mls	r7, r3, r1, r5
 8000d60:	5dc7      	ldrb	r7, [r0, r7]
 8000d62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d66:	462f      	mov	r7, r5
 8000d68:	42bb      	cmp	r3, r7
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	d9f4      	bls.n	8000d58 <_printf_i+0x110>
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d10b      	bne.n	8000d8a <_printf_i+0x142>
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	07df      	lsls	r7, r3, #31
 8000d76:	d508      	bpl.n	8000d8a <_printf_i+0x142>
 8000d78:	6923      	ldr	r3, [r4, #16]
 8000d7a:	6861      	ldr	r1, [r4, #4]
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	bfde      	ittt	le
 8000d80:	2330      	movle	r3, #48	@ 0x30
 8000d82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000d8a:	1b92      	subs	r2, r2, r6
 8000d8c:	6122      	str	r2, [r4, #16]
 8000d8e:	f8cd a000 	str.w	sl, [sp]
 8000d92:	464b      	mov	r3, r9
 8000d94:	aa03      	add	r2, sp, #12
 8000d96:	4621      	mov	r1, r4
 8000d98:	4640      	mov	r0, r8
 8000d9a:	f7ff fee7 	bl	8000b6c <_printf_common>
 8000d9e:	3001      	adds	r0, #1
 8000da0:	d14a      	bne.n	8000e38 <_printf_i+0x1f0>
 8000da2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da6:	b004      	add	sp, #16
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6023      	str	r3, [r4, #0]
 8000db4:	4832      	ldr	r0, [pc, #200]	@ (8000e80 <_printf_i+0x238>)
 8000db6:	2778      	movs	r7, #120	@ 0x78
 8000db8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	6831      	ldr	r1, [r6, #0]
 8000dc0:	061f      	lsls	r7, r3, #24
 8000dc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dc6:	d402      	bmi.n	8000dce <_printf_i+0x186>
 8000dc8:	065f      	lsls	r7, r3, #25
 8000dca:	bf48      	it	mi
 8000dcc:	b2ad      	uxthmi	r5, r5
 8000dce:	6031      	str	r1, [r6, #0]
 8000dd0:	07d9      	lsls	r1, r3, #31
 8000dd2:	bf44      	itt	mi
 8000dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8000dd8:	6023      	strmi	r3, [r4, #0]
 8000dda:	b11d      	cbz	r5, 8000de4 <_printf_i+0x19c>
 8000ddc:	2310      	movs	r3, #16
 8000dde:	e7ad      	b.n	8000d3c <_printf_i+0xf4>
 8000de0:	4826      	ldr	r0, [pc, #152]	@ (8000e7c <_printf_i+0x234>)
 8000de2:	e7e9      	b.n	8000db8 <_printf_i+0x170>
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	f023 0320 	bic.w	r3, r3, #32
 8000dea:	6023      	str	r3, [r4, #0]
 8000dec:	e7f6      	b.n	8000ddc <_printf_i+0x194>
 8000dee:	4616      	mov	r6, r2
 8000df0:	e7bd      	b.n	8000d6e <_printf_i+0x126>
 8000df2:	6833      	ldr	r3, [r6, #0]
 8000df4:	6825      	ldr	r5, [r4, #0]
 8000df6:	6961      	ldr	r1, [r4, #20]
 8000df8:	1d18      	adds	r0, r3, #4
 8000dfa:	6030      	str	r0, [r6, #0]
 8000dfc:	062e      	lsls	r6, r5, #24
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	d501      	bpl.n	8000e06 <_printf_i+0x1be>
 8000e02:	6019      	str	r1, [r3, #0]
 8000e04:	e002      	b.n	8000e0c <_printf_i+0x1c4>
 8000e06:	0668      	lsls	r0, r5, #25
 8000e08:	d5fb      	bpl.n	8000e02 <_printf_i+0x1ba>
 8000e0a:	8019      	strh	r1, [r3, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6123      	str	r3, [r4, #16]
 8000e10:	4616      	mov	r6, r2
 8000e12:	e7bc      	b.n	8000d8e <_printf_i+0x146>
 8000e14:	6833      	ldr	r3, [r6, #0]
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	6032      	str	r2, [r6, #0]
 8000e1a:	681e      	ldr	r6, [r3, #0]
 8000e1c:	6862      	ldr	r2, [r4, #4]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff f9dd 	bl	80001e0 <memchr>
 8000e26:	b108      	cbz	r0, 8000e2c <_printf_i+0x1e4>
 8000e28:	1b80      	subs	r0, r0, r6
 8000e2a:	6060      	str	r0, [r4, #4]
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	6123      	str	r3, [r4, #16]
 8000e30:	2300      	movs	r3, #0
 8000e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e36:	e7aa      	b.n	8000d8e <_printf_i+0x146>
 8000e38:	6923      	ldr	r3, [r4, #16]
 8000e3a:	4632      	mov	r2, r6
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4640      	mov	r0, r8
 8000e40:	47d0      	blx	sl
 8000e42:	3001      	adds	r0, #1
 8000e44:	d0ad      	beq.n	8000da2 <_printf_i+0x15a>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	079b      	lsls	r3, r3, #30
 8000e4a:	d413      	bmi.n	8000e74 <_printf_i+0x22c>
 8000e4c:	68e0      	ldr	r0, [r4, #12]
 8000e4e:	9b03      	ldr	r3, [sp, #12]
 8000e50:	4298      	cmp	r0, r3
 8000e52:	bfb8      	it	lt
 8000e54:	4618      	movlt	r0, r3
 8000e56:	e7a6      	b.n	8000da6 <_printf_i+0x15e>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4632      	mov	r2, r6
 8000e5c:	4649      	mov	r1, r9
 8000e5e:	4640      	mov	r0, r8
 8000e60:	47d0      	blx	sl
 8000e62:	3001      	adds	r0, #1
 8000e64:	d09d      	beq.n	8000da2 <_printf_i+0x15a>
 8000e66:	3501      	adds	r5, #1
 8000e68:	68e3      	ldr	r3, [r4, #12]
 8000e6a:	9903      	ldr	r1, [sp, #12]
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	42ab      	cmp	r3, r5
 8000e70:	dcf2      	bgt.n	8000e58 <_printf_i+0x210>
 8000e72:	e7eb      	b.n	8000e4c <_printf_i+0x204>
 8000e74:	2500      	movs	r5, #0
 8000e76:	f104 0619 	add.w	r6, r4, #25
 8000e7a:	e7f5      	b.n	8000e68 <_printf_i+0x220>
 8000e7c:	0800104e 	.word	0x0800104e
 8000e80:	0800105f 	.word	0x0800105f

08000e84 <__malloc_lock>:
 8000e84:	4801      	ldr	r0, [pc, #4]	@ (8000e8c <__malloc_lock+0x8>)
 8000e86:	f7ff bc75 	b.w	8000774 <__retarget_lock_acquire_recursive>
 8000e8a:	bf00      	nop
 8000e8c:	200001ac 	.word	0x200001ac

08000e90 <__malloc_unlock>:
 8000e90:	4801      	ldr	r0, [pc, #4]	@ (8000e98 <__malloc_unlock+0x8>)
 8000e92:	f7ff bc70 	b.w	8000776 <__retarget_lock_release_recursive>
 8000e96:	bf00      	nop
 8000e98:	200001ac 	.word	0x200001ac

08000e9c <_realloc_r>:
 8000e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea0:	4607      	mov	r7, r0
 8000ea2:	4614      	mov	r4, r2
 8000ea4:	460d      	mov	r5, r1
 8000ea6:	b921      	cbnz	r1, 8000eb2 <_realloc_r+0x16>
 8000ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eac:	4611      	mov	r1, r2
 8000eae:	f7ff bddd 	b.w	8000a6c <_malloc_r>
 8000eb2:	b92a      	cbnz	r2, 8000ec0 <_realloc_r+0x24>
 8000eb4:	f000 f858 	bl	8000f68 <_free_r>
 8000eb8:	4625      	mov	r5, r4
 8000eba:	4628      	mov	r0, r5
 8000ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec0:	f000 f89c 	bl	8000ffc <_malloc_usable_size_r>
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	4606      	mov	r6, r0
 8000ec8:	d802      	bhi.n	8000ed0 <_realloc_r+0x34>
 8000eca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000ece:	d8f4      	bhi.n	8000eba <_realloc_r+0x1e>
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f7ff fdca 	bl	8000a6c <_malloc_r>
 8000ed8:	4680      	mov	r8, r0
 8000eda:	b908      	cbnz	r0, 8000ee0 <_realloc_r+0x44>
 8000edc:	4645      	mov	r5, r8
 8000ede:	e7ec      	b.n	8000eba <_realloc_r+0x1e>
 8000ee0:	42b4      	cmp	r4, r6
 8000ee2:	4622      	mov	r2, r4
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	bf28      	it	cs
 8000ee8:	4632      	movcs	r2, r6
 8000eea:	f000 f82f 	bl	8000f4c <memcpy>
 8000eee:	4629      	mov	r1, r5
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	f000 f839 	bl	8000f68 <_free_r>
 8000ef6:	e7f1      	b.n	8000edc <_realloc_r+0x40>

08000ef8 <memmove>:
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	b510      	push	{r4, lr}
 8000efc:	eb01 0402 	add.w	r4, r1, r2
 8000f00:	d902      	bls.n	8000f08 <memmove+0x10>
 8000f02:	4284      	cmp	r4, r0
 8000f04:	4623      	mov	r3, r4
 8000f06:	d807      	bhi.n	8000f18 <memmove+0x20>
 8000f08:	1e43      	subs	r3, r0, #1
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	d008      	beq.n	8000f20 <memmove+0x28>
 8000f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f16:	e7f8      	b.n	8000f0a <memmove+0x12>
 8000f18:	4402      	add	r2, r0
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	d100      	bne.n	8000f22 <memmove+0x2a>
 8000f20:	bd10      	pop	{r4, pc}
 8000f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f2a:	e7f7      	b.n	8000f1c <memmove+0x24>

08000f2c <_sbrk_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d06      	ldr	r5, [pc, #24]	@ (8000f48 <_sbrk_r+0x1c>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	4608      	mov	r0, r1
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	f7ff fa58 	bl	80003ec <_sbrk>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d102      	bne.n	8000f46 <_sbrk_r+0x1a>
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	b103      	cbz	r3, 8000f46 <_sbrk_r+0x1a>
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	200001b8 	.word	0x200001b8

08000f4c <memcpy>:
 8000f4c:	440a      	add	r2, r1
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000f54:	d100      	bne.n	8000f58 <memcpy+0xc>
 8000f56:	4770      	bx	lr
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d1f9      	bne.n	8000f5a <memcpy+0xe>
 8000f66:	bd10      	pop	{r4, pc}

08000f68 <_free_r>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4605      	mov	r5, r0
 8000f6c:	2900      	cmp	r1, #0
 8000f6e:	d041      	beq.n	8000ff4 <_free_r+0x8c>
 8000f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f74:	1f0c      	subs	r4, r1, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bfb8      	it	lt
 8000f7a:	18e4      	addlt	r4, r4, r3
 8000f7c:	f7ff ff82 	bl	8000e84 <__malloc_lock>
 8000f80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <_free_r+0x90>)
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	b933      	cbnz	r3, 8000f94 <_free_r+0x2c>
 8000f86:	6063      	str	r3, [r4, #4]
 8000f88:	6014      	str	r4, [r2, #0]
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f90:	f7ff bf7e 	b.w	8000e90 <__malloc_unlock>
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <_free_r+0x42>
 8000f98:	6820      	ldr	r0, [r4, #0]
 8000f9a:	1821      	adds	r1, r4, r0
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	bf01      	itttt	eq
 8000fa0:	6819      	ldreq	r1, [r3, #0]
 8000fa2:	685b      	ldreq	r3, [r3, #4]
 8000fa4:	1809      	addeq	r1, r1, r0
 8000fa6:	6021      	streq	r1, [r4, #0]
 8000fa8:	e7ed      	b.n	8000f86 <_free_r+0x1e>
 8000faa:	461a      	mov	r2, r3
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	b10b      	cbz	r3, 8000fb4 <_free_r+0x4c>
 8000fb0:	42a3      	cmp	r3, r4
 8000fb2:	d9fa      	bls.n	8000faa <_free_r+0x42>
 8000fb4:	6811      	ldr	r1, [r2, #0]
 8000fb6:	1850      	adds	r0, r2, r1
 8000fb8:	42a0      	cmp	r0, r4
 8000fba:	d10b      	bne.n	8000fd4 <_free_r+0x6c>
 8000fbc:	6820      	ldr	r0, [r4, #0]
 8000fbe:	4401      	add	r1, r0
 8000fc0:	1850      	adds	r0, r2, r1
 8000fc2:	4283      	cmp	r3, r0
 8000fc4:	6011      	str	r1, [r2, #0]
 8000fc6:	d1e0      	bne.n	8000f8a <_free_r+0x22>
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	6053      	str	r3, [r2, #4]
 8000fce:	4408      	add	r0, r1
 8000fd0:	6010      	str	r0, [r2, #0]
 8000fd2:	e7da      	b.n	8000f8a <_free_r+0x22>
 8000fd4:	d902      	bls.n	8000fdc <_free_r+0x74>
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	e7d6      	b.n	8000f8a <_free_r+0x22>
 8000fdc:	6820      	ldr	r0, [r4, #0]
 8000fde:	1821      	adds	r1, r4, r0
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	bf04      	itt	eq
 8000fe4:	6819      	ldreq	r1, [r3, #0]
 8000fe6:	685b      	ldreq	r3, [r3, #4]
 8000fe8:	6063      	str	r3, [r4, #4]
 8000fea:	bf04      	itt	eq
 8000fec:	1809      	addeq	r1, r1, r0
 8000fee:	6021      	streq	r1, [r4, #0]
 8000ff0:	6054      	str	r4, [r2, #4]
 8000ff2:	e7ca      	b.n	8000f8a <_free_r+0x22>
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001b4 	.word	0x200001b4

08000ffc <_malloc_usable_size_r>:
 8000ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001000:	1f18      	subs	r0, r3, #4
 8001002:	2b00      	cmp	r3, #0
 8001004:	bfbc      	itt	lt
 8001006:	580b      	ldrlt	r3, [r1, r0]
 8001008:	18c0      	addlt	r0, r0, r3
 800100a:	4770      	bx	lr

0800100c <_init>:
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	bf00      	nop
 8001010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001012:	bc08      	pop	{r3}
 8001014:	469e      	mov	lr, r3
 8001016:	4770      	bx	lr

08001018 <_fini>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr
